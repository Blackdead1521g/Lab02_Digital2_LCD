

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Jul 28 12:02:35 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45     0000                     
    46                           ; Version 2.40
    47                           ; Generated 17/11/2021 GMT
    48                           ; 
    49                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution. Publication is not required when
    63                           ;        this file is used in an embedded application.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F887 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81     0000                     	;# 
    82     0001                     	;# 
    83     0002                     	;# 
    84     0003                     	;# 
    85     0004                     	;# 
    86     0005                     	;# 
    87     0006                     	;# 
    88     0007                     	;# 
    89     0008                     	;# 
    90     0009                     	;# 
    91     000A                     	;# 
    92     000B                     	;# 
    93     000C                     	;# 
    94     000D                     	;# 
    95     000E                     	;# 
    96     000E                     	;# 
    97     000F                     	;# 
    98     0010                     	;# 
    99     0011                     	;# 
   100     0012                     	;# 
   101     0013                     	;# 
   102     0014                     	;# 
   103     0015                     	;# 
   104     0015                     	;# 
   105     0016                     	;# 
   106     0017                     	;# 
   107     0018                     	;# 
   108     0019                     	;# 
   109     001A                     	;# 
   110     001B                     	;# 
   111     001B                     	;# 
   112     001C                     	;# 
   113     001D                     	;# 
   114     001E                     	;# 
   115     001F                     	;# 
   116     0081                     	;# 
   117     0085                     	;# 
   118     0086                     	;# 
   119     0087                     	;# 
   120     0088                     	;# 
   121     0089                     	;# 
   122     008C                     	;# 
   123     008D                     	;# 
   124     008E                     	;# 
   125     008F                     	;# 
   126     0090                     	;# 
   127     0091                     	;# 
   128     0092                     	;# 
   129     0093                     	;# 
   130     0093                     	;# 
   131     0093                     	;# 
   132     0094                     	;# 
   133     0095                     	;# 
   134     0096                     	;# 
   135     0097                     	;# 
   136     0098                     	;# 
   137     0099                     	;# 
   138     009A                     	;# 
   139     009B                     	;# 
   140     009C                     	;# 
   141     009D                     	;# 
   142     009E                     	;# 
   143     009F                     	;# 
   144     0105                     	;# 
   145     0107                     	;# 
   146     0108                     	;# 
   147     0109                     	;# 
   148     010C                     	;# 
   149     010C                     	;# 
   150     010D                     	;# 
   151     010E                     	;# 
   152     010F                     	;# 
   153     0185                     	;# 
   154     0187                     	;# 
   155     0188                     	;# 
   156     0189                     	;# 
   157     018C                     	;# 
   158     018D                     	;# 
   159     0000                     	;# 
   160     0001                     	;# 
   161     0002                     	;# 
   162     0003                     	;# 
   163     0004                     	;# 
   164     0005                     	;# 
   165     0006                     	;# 
   166     0007                     	;# 
   167     0008                     	;# 
   168     0009                     	;# 
   169     000A                     	;# 
   170     000B                     	;# 
   171     000C                     	;# 
   172     000D                     	;# 
   173     000E                     	;# 
   174     000E                     	;# 
   175     000F                     	;# 
   176     0010                     	;# 
   177     0011                     	;# 
   178     0012                     	;# 
   179     0013                     	;# 
   180     0014                     	;# 
   181     0015                     	;# 
   182     0015                     	;# 
   183     0016                     	;# 
   184     0017                     	;# 
   185     0018                     	;# 
   186     0019                     	;# 
   187     001A                     	;# 
   188     001B                     	;# 
   189     001B                     	;# 
   190     001C                     	;# 
   191     001D                     	;# 
   192     001E                     	;# 
   193     001F                     	;# 
   194     0081                     	;# 
   195     0085                     	;# 
   196     0086                     	;# 
   197     0087                     	;# 
   198     0088                     	;# 
   199     0089                     	;# 
   200     008C                     	;# 
   201     008D                     	;# 
   202     008E                     	;# 
   203     008F                     	;# 
   204     0090                     	;# 
   205     0091                     	;# 
   206     0092                     	;# 
   207     0093                     	;# 
   208     0093                     	;# 
   209     0093                     	;# 
   210     0094                     	;# 
   211     0095                     	;# 
   212     0096                     	;# 
   213     0097                     	;# 
   214     0098                     	;# 
   215     0099                     	;# 
   216     009A                     	;# 
   217     009B                     	;# 
   218     009C                     	;# 
   219     009D                     	;# 
   220     009E                     	;# 
   221     009F                     	;# 
   222     0105                     	;# 
   223     0107                     	;# 
   224     0108                     	;# 
   225     0109                     	;# 
   226     010C                     	;# 
   227     010C                     	;# 
   228     010D                     	;# 
   229     010E                     	;# 
   230     010F                     	;# 
   231     0185                     	;# 
   232     0187                     	;# 
   233     0188                     	;# 
   234     0189                     	;# 
   235     018C                     	;# 
   236     018D                     	;# 
   237     0000                     	;# 
   238     0001                     	;# 
   239     0002                     	;# 
   240     0003                     	;# 
   241     0004                     	;# 
   242     0005                     	;# 
   243     0006                     	;# 
   244     0007                     	;# 
   245     0008                     	;# 
   246     0009                     	;# 
   247     000A                     	;# 
   248     000B                     	;# 
   249     000C                     	;# 
   250     000D                     	;# 
   251     000E                     	;# 
   252     000E                     	;# 
   253     000F                     	;# 
   254     0010                     	;# 
   255     0011                     	;# 
   256     0012                     	;# 
   257     0013                     	;# 
   258     0014                     	;# 
   259     0015                     	;# 
   260     0015                     	;# 
   261     0016                     	;# 
   262     0017                     	;# 
   263     0018                     	;# 
   264     0019                     	;# 
   265     001A                     	;# 
   266     001B                     	;# 
   267     001B                     	;# 
   268     001C                     	;# 
   269     001D                     	;# 
   270     001E                     	;# 
   271     001F                     	;# 
   272     0081                     	;# 
   273     0085                     	;# 
   274     0086                     	;# 
   275     0087                     	;# 
   276     0088                     	;# 
   277     0089                     	;# 
   278     008C                     	;# 
   279     008D                     	;# 
   280     008E                     	;# 
   281     008F                     	;# 
   282     0090                     	;# 
   283     0091                     	;# 
   284     0092                     	;# 
   285     0093                     	;# 
   286     0093                     	;# 
   287     0093                     	;# 
   288     0094                     	;# 
   289     0095                     	;# 
   290     0096                     	;# 
   291     0097                     	;# 
   292     0098                     	;# 
   293     0099                     	;# 
   294     009A                     	;# 
   295     009B                     	;# 
   296     009C                     	;# 
   297     009D                     	;# 
   298     009E                     	;# 
   299     009F                     	;# 
   300     0105                     	;# 
   301     0107                     	;# 
   302     0108                     	;# 
   303     0109                     	;# 
   304     010C                     	;# 
   305     010C                     	;# 
   306     010D                     	;# 
   307     010E                     	;# 
   308     010F                     	;# 
   309     0185                     	;# 
   310     0187                     	;# 
   311     0188                     	;# 
   312     0189                     	;# 
   313     018C                     	;# 
   314     018D                     	;# 
   315     0000                     	;# 
   316     0001                     	;# 
   317     0002                     	;# 
   318     0003                     	;# 
   319     0004                     	;# 
   320     0005                     	;# 
   321     0006                     	;# 
   322     0007                     	;# 
   323     0008                     	;# 
   324     0009                     	;# 
   325     000A                     	;# 
   326     000B                     	;# 
   327     000C                     	;# 
   328     000D                     	;# 
   329     000E                     	;# 
   330     000E                     	;# 
   331     000F                     	;# 
   332     0010                     	;# 
   333     0011                     	;# 
   334     0012                     	;# 
   335     0013                     	;# 
   336     0014                     	;# 
   337     0015                     	;# 
   338     0015                     	;# 
   339     0016                     	;# 
   340     0017                     	;# 
   341     0018                     	;# 
   342     0019                     	;# 
   343     001A                     	;# 
   344     001B                     	;# 
   345     001B                     	;# 
   346     001C                     	;# 
   347     001D                     	;# 
   348     001E                     	;# 
   349     001F                     	;# 
   350     0081                     	;# 
   351     0085                     	;# 
   352     0086                     	;# 
   353     0087                     	;# 
   354     0088                     	;# 
   355     0089                     	;# 
   356     008C                     	;# 
   357     008D                     	;# 
   358     008E                     	;# 
   359     008F                     	;# 
   360     0090                     	;# 
   361     0091                     	;# 
   362     0092                     	;# 
   363     0093                     	;# 
   364     0093                     	;# 
   365     0093                     	;# 
   366     0094                     	;# 
   367     0095                     	;# 
   368     0096                     	;# 
   369     0097                     	;# 
   370     0098                     	;# 
   371     0099                     	;# 
   372     009A                     	;# 
   373     009B                     	;# 
   374     009C                     	;# 
   375     009D                     	;# 
   376     009E                     	;# 
   377     009F                     	;# 
   378     0105                     	;# 
   379     0107                     	;# 
   380     0108                     	;# 
   381     0109                     	;# 
   382     010C                     	;# 
   383     010C                     	;# 
   384     010D                     	;# 
   385     010E                     	;# 
   386     010F                     	;# 
   387     0185                     	;# 
   388     0187                     	;# 
   389     0188                     	;# 
   390     0189                     	;# 
   391     018C                     	;# 
   392     018D                     	;# 
   393     0000                     	;# 
   394     0001                     	;# 
   395     0002                     	;# 
   396     0003                     	;# 
   397     0004                     	;# 
   398     0005                     	;# 
   399     0006                     	;# 
   400     0007                     	;# 
   401     0008                     	;# 
   402     0009                     	;# 
   403     000A                     	;# 
   404     000B                     	;# 
   405     000C                     	;# 
   406     000D                     	;# 
   407     000E                     	;# 
   408     000E                     	;# 
   409     000F                     	;# 
   410     0010                     	;# 
   411     0011                     	;# 
   412     0012                     	;# 
   413     0013                     	;# 
   414     0014                     	;# 
   415     0015                     	;# 
   416     0015                     	;# 
   417     0016                     	;# 
   418     0017                     	;# 
   419     0018                     	;# 
   420     0019                     	;# 
   421     001A                     	;# 
   422     001B                     	;# 
   423     001B                     	;# 
   424     001C                     	;# 
   425     001D                     	;# 
   426     001E                     	;# 
   427     001F                     	;# 
   428     0081                     	;# 
   429     0085                     	;# 
   430     0086                     	;# 
   431     0087                     	;# 
   432     0088                     	;# 
   433     0089                     	;# 
   434     008C                     	;# 
   435     008D                     	;# 
   436     008E                     	;# 
   437     008F                     	;# 
   438     0090                     	;# 
   439     0091                     	;# 
   440     0092                     	;# 
   441     0093                     	;# 
   442     0093                     	;# 
   443     0093                     	;# 
   444     0094                     	;# 
   445     0095                     	;# 
   446     0096                     	;# 
   447     0097                     	;# 
   448     0098                     	;# 
   449     0099                     	;# 
   450     009A                     	;# 
   451     009B                     	;# 
   452     009C                     	;# 
   453     009D                     	;# 
   454     009E                     	;# 
   455     009F                     	;# 
   456     0105                     	;# 
   457     0107                     	;# 
   458     0108                     	;# 
   459     0109                     	;# 
   460     010C                     	;# 
   461     010C                     	;# 
   462     010D                     	;# 
   463     010E                     	;# 
   464     010F                     	;# 
   465     0185                     	;# 
   466     0187                     	;# 
   467     0188                     	;# 
   468     0189                     	;# 
   469     018C                     	;# 
   470     018D                     	;# 
   471     0000                     	;# 
   472     0001                     	;# 
   473     0002                     	;# 
   474     0003                     	;# 
   475     0004                     	;# 
   476     0005                     	;# 
   477     0006                     	;# 
   478     0007                     	;# 
   479     0008                     	;# 
   480     0009                     	;# 
   481     000A                     	;# 
   482     000B                     	;# 
   483     000C                     	;# 
   484     000D                     	;# 
   485     000E                     	;# 
   486     000E                     	;# 
   487     000F                     	;# 
   488     0010                     	;# 
   489     0011                     	;# 
   490     0012                     	;# 
   491     0013                     	;# 
   492     0014                     	;# 
   493     0015                     	;# 
   494     0015                     	;# 
   495     0016                     	;# 
   496     0017                     	;# 
   497     0018                     	;# 
   498     0019                     	;# 
   499     001A                     	;# 
   500     001B                     	;# 
   501     001B                     	;# 
   502     001C                     	;# 
   503     001D                     	;# 
   504     001E                     	;# 
   505     001F                     	;# 
   506     0081                     	;# 
   507     0085                     	;# 
   508     0086                     	;# 
   509     0087                     	;# 
   510     0088                     	;# 
   511     0089                     	;# 
   512     008C                     	;# 
   513     008D                     	;# 
   514     008E                     	;# 
   515     008F                     	;# 
   516     0090                     	;# 
   517     0091                     	;# 
   518     0092                     	;# 
   519     0093                     	;# 
   520     0093                     	;# 
   521     0093                     	;# 
   522     0094                     	;# 
   523     0095                     	;# 
   524     0096                     	;# 
   525     0097                     	;# 
   526     0098                     	;# 
   527     0099                     	;# 
   528     009A                     	;# 
   529     009B                     	;# 
   530     009C                     	;# 
   531     009D                     	;# 
   532     009E                     	;# 
   533     009F                     	;# 
   534     0105                     	;# 
   535     0107                     	;# 
   536     0108                     	;# 
   537     0109                     	;# 
   538     010C                     	;# 
   539     010C                     	;# 
   540     010D                     	;# 
   541     010E                     	;# 
   542     010F                     	;# 
   543     0185                     	;# 
   544     0187                     	;# 
   545     0188                     	;# 
   546     0189                     	;# 
   547     018C                     	;# 
   548     018D                     	;# 
   549                           
   550                           	psect	idataBANK3
   551     05AD                     __pidataBANK3:
   552                           
   553                           ;initializer for _menu
   554     05AD  344D               	retlw	77
   555     05AE  3465               	retlw	101
   556     05AF  346E               	retlw	110
   557     05B0  3475               	retlw	117
   558     05B1  343A               	retlw	58
   559     05B2  3420               	retlw	32
   560     05B3  340D               	retlw	13
   561     05B4  3420               	retlw	32
   562     05B5  3431               	retlw	49
   563     05B6  3429               	retlw	41
   564     05B7  344C               	retlw	76
   565     05B8  3465               	retlw	101
   566     05B9  3465               	retlw	101
   567     05BA  3472               	retlw	114
   568     05BB  3420               	retlw	32
   569     05BC  3470               	retlw	112
   570     05BD  346F               	retlw	111
   571     05BE  3474               	retlw	116
   572     05BF  3465               	retlw	101
   573     05C0  346E               	retlw	110
   574     05C1  3463               	retlw	99
   575     05C2  3469               	retlw	105
   576     05C3  346F               	retlw	111
   577     05C4  346D               	retlw	109
   578     05C5  3465               	retlw	101
   579     05C6  3474               	retlw	116
   580     05C7  3472               	retlw	114
   581     05C8  346F               	retlw	111
   582     05C9  3420               	retlw	32
   583     05CA  340D               	retlw	13
   584     05CB  3420               	retlw	32
   585     05CC  3432               	retlw	50
   586     05CD  3429               	retlw	41
   587     05CE  3449               	retlw	73
   588     05CF  346E               	retlw	110
   589     05D0  3463               	retlw	99
   590     05D1  3472               	retlw	114
   591     05D2  3465               	retlw	101
   592     05D3  346D               	retlw	109
   593     05D4  3465               	retlw	101
   594     05D5  346E               	retlw	110
   595     05D6  3474               	retlw	116
   596     05D7  3461               	retlw	97
   597     05D8  3472               	retlw	114
   598     05D9  342F               	retlw	47
   599     05DA  3464               	retlw	100
   600     05DB  3465               	retlw	101
   601     05DC  3463               	retlw	99
   602     05DD  3472               	retlw	114
   603     05DE  3465               	retlw	101
   604     05DF  346D               	retlw	109
   605     05E0  3465               	retlw	101
   606     05E1  346E               	retlw	110
   607     05E2  3474               	retlw	116
   608     05E3  3461               	retlw	97
   609     05E4  3472               	retlw	114
   610     05E5  3420               	retlw	32
   611     05E6  3470               	retlw	112
   612     05E7  3475               	retlw	117
   613     05E8  3465               	retlw	101
   614     05E9  3472               	retlw	114
   615     05EA  3474               	retlw	116
   616     05EB  346F               	retlw	111
   617     05EC  3420               	retlw	32
   618     05ED  340D               	retlw	13
   619     05EE  3400               	retlw	0
   620                           
   621                           	psect	strings
   622     039D                     __pstrings:
   623     039D                     stringtab:
   624     039D                     __stringtab:
   625                           
   626                           ;	String table - string pointers are 1 byte each
   627     039D  1BFF               	btfsc	btemp+1,7
   628     039E  2BA7               	ljmp	stringcode
   629     039F  1383               	bcf	3,7
   630     03A0  187F               	btfsc	btemp+1,0
   631     03A1  1783               	bsf	3,7
   632     03A2  0800               	movf	0,w
   633     03A3  0A84               	incf	4,f
   634     03A4  1903               	skipnz
   635     03A5  0AFF               	incf	btemp+1,f
   636     03A6  0008               	return
   637     03A7                     stringcode:
   638     03A7                     stringdir:
   639     03A7  3003               	movlw	high stringdir
   640     03A8  008A               	movwf	10
   641     03A9  0804               	movf	4,w
   642     03AA  0A84               	incf	4,f
   643     03AB  0782               	addwf	2,f
   644     03AC                     __stringbase:
   645     03AC  3400               	retlw	0
   646     03AD                     __end_of__stringtab:
   647     03AD                     _dpowers:
   648     03AD  3401               	retlw	1
   649     03AE  3400               	retlw	0
   650     03AF  340A               	retlw	10
   651     03B0  3400               	retlw	0
   652     03B1  3464               	retlw	100
   653     03B2  3400               	retlw	0
   654     03B3  34E8               	retlw	232
   655     03B4  3403               	retlw	3
   656     03B5  3410               	retlw	16
   657     03B6  3427               	retlw	39
   658     03B7                     __end_of_dpowers:
   659     0019                     _TXREG	set	25
   660     0018                     _RCSTAbits	set	24
   661     0007                     _PORTCbits	set	7
   662     0009                     _PORTE	set	9
   663     0008                     _PORTD	set	8
   664     0007                     _PORTC	set	7
   665     0006                     _PORTB	set	6
   666     0005                     _PORTA	set	5
   667     001A                     _RCREG	set	26
   668     0008                     _PORTDbits	set	8
   669     001E                     _ADRESH	set	30
   670     000B                     _INTCONbits	set	11
   671     000C                     _PIR1bits	set	12
   672     001F                     _ADCON0bits	set	31
   673     0064                     _TXIF	set	100
   674     00C7                     _SPEN	set	199
   675     00C4                     _CREN	set	196
   676     00F8                     _ADON	set	248
   677     0043                     _RD3	set	67
   678     0047                     _RD7	set	71
   679     0046                     _RD6	set	70
   680     0045                     _RD5	set	69
   681     0044                     _RD4	set	68
   682     0098                     _TXSTAbits	set	152
   683     0099                     _SPBRG	set	153
   684     009A                     _SPBRGH	set	154
   685     008F                     _OSCCONbits	set	143
   686     0088                     _TRISD	set	136
   687     0086                     _TRISB	set	134
   688     0087                     _TRISC	set	135
   689     0085                     _TRISA	set	133
   690     008C                     _PIE1bits	set	140
   691     009F                     _ADCON1bits	set	159
   692     0189                     _ANSELH	set	393
   693     0188                     _ANSELbits	set	392
   694     0C3B                     _BRG16	set	3131
   695     03B7                     STR_1:
   696     03B7  3445               	retlw	69	;'E'
   697     03B8  346C               	retlw	108	;'l'
   698     03B9  3420               	retlw	32	;' '
   699     03BA  3476               	retlw	118	;'v'
   700     03BB  3461               	retlw	97	;'a'
   701     03BC  346C               	retlw	108	;'l'
   702     03BD  346F               	retlw	111	;'o'
   703     03BE  3472               	retlw	114	;'r'
   704     03BF  3420               	retlw	32	;' '
   705     03C0  3464               	retlw	100	;'d'
   706     03C1  3465               	retlw	101	;'e'
   707     03C2  346C               	retlw	108	;'l'
   708     03C3  3420               	retlw	32	;' '
   709     03C4  3470               	retlw	112	;'p'
   710     03C5  346F               	retlw	111	;'o'
   711     03C6  3474               	retlw	116	;'t'
   712     03C7  3465               	retlw	101	;'e'
   713     03C8  346E               	retlw	110	;'n'
   714     03C9  3463               	retlw	99	;'c'
   715     03CA  3469               	retlw	105	;'i'
   716     03CB  346F               	retlw	111	;'o'
   717     03CC  346D               	retlw	109	;'m'
   718     03CD  3465               	retlw	101	;'e'
   719     03CE  3474               	retlw	116	;'t'
   720     03CF  3472               	retlw	114	;'r'
   721     03D0  346F               	retlw	111	;'o'
   722     03D1  3420               	retlw	32	;' '
   723     03D2  3465               	retlw	101	;'e'
   724     03D3  3473               	retlw	115	;'s'
   725     03D4  343A               	retlw	58	;':'
   726     03D5  3400               	retlw	0
   727     03D6                     STR_2:
   728     03D6  344E               	retlw	78	;'N'
   729     03D7  346F               	retlw	111	;'o'
   730     03D8  3420               	retlw	32	;' '
   731     03D9  3465               	retlw	101	;'e'
   732     03DA  3478               	retlw	120	;'x'
   733     03DB  3469               	retlw	105	;'i'
   734     03DC  3473               	retlw	115	;'s'
   735     03DD  3474               	retlw	116	;'t'
   736     03DE  3465               	retlw	101	;'e'
   737     03DF  3420               	retlw	32	;' '
   738     03E0  3465               	retlw	101	;'e'
   739     03E1  3473               	retlw	115	;'s'
   740     03E2  3461               	retlw	97	;'a'
   741     03E3  3420               	retlw	32	;' '
   742     03E4  346F               	retlw	111	;'o'
   743     03E5  3470               	retlw	112	;'p'
   744     03E6  3463               	retlw	99	;'c'
   745     03E7  3469               	retlw	105	;'i'
   746     03E8  346F               	retlw	111	;'o'
   747     03E9  346E               	retlw	110	;'n'
   748     03EA  3420               	retlw	32	;' '
   749     03EB  340D               	retlw	13
   750     03EC  3400               	retlw	0
   751     03ED                     STR_3:
   752     03ED  3456               	retlw	86	;'V'
   753     03EE  346F               	retlw	111	;'o'
   754     03EF  346C               	retlw	108	;'l'
   755     03F0  3474               	retlw	116	;'t'
   756     03F1  3400               	retlw	0
   757     03F2                     STR_4:
   758     03F2  3443               	retlw	67	;'C'
   759     03F3  346F               	retlw	111	;'o'
   760     03F4  346E               	retlw	110	;'n'
   761     03F5  3474               	retlw	116	;'t'
   762     03F6  3400               	retlw	0
   763     03F7                     STR_5:
   764     03F7  3425               	retlw	37	;'%'
   765     03F8  3464               	retlw	100	;'d'
   766     03F9  340D               	retlw	13
   767     03FA  3400               	retlw	0
   768     03F7                     
   769                           	psect	cinit
   770     0015                     start_initialization:	
   771                           ; #config settings
   772                           
   773     0015                     __initialization:
   774                           
   775                           ; Initialize objects allocated to BANK3
   776     0015  1783               	bsf	3,7	;select IRP bank2
   777     0016  30D2               	movlw	low (__pdataBANK3+66)
   778     0017  00FD               	movwf	btemp+-1
   779     0018  3005               	movlw	high __pidataBANK3
   780     0019  00FE               	movwf	btemp
   781     001A  30AD               	movlw	low __pidataBANK3
   782     001B  00FF               	movwf	btemp+1
   783     001C  3090               	movlw	low __pdataBANK3
   784     001D  0084               	movwf	4
   785     001E  120A  158A  2787  120A  118A  	fcall	init_ram0
   786                           
   787                           ; Clear objects allocated to BANK1
   788     0023  1683               	bsf	3,5	;RP0=1, select bank1
   789     0024  1303               	bcf	3,6	;RP1=0, select bank1
   790     0025  01CD               	clrf	__pbssBANK1& (0+127)
   791     0026  01CE               	clrf	(__pbssBANK1+1)& (0+127)
   792     0027  01CF               	clrf	(__pbssBANK1+2)& (0+127)
   793     0028  01D0               	clrf	(__pbssBANK1+3)& (0+127)
   794                           
   795                           ; Clear objects allocated to BANK0
   796     0029  1383               	bcf	3,7	;select IRP bank0
   797     002A  3045               	movlw	low __pbssBANK0
   798     002B  0084               	movwf	4
   799     002C  3059               	movlw	low (__pbssBANK0+20)
   800     002D  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   801     0032                     end_of_initialization:	
   802                           ;End of C runtime variable initialization code
   803                           
   804     0032                     __end_of__initialization:
   805     0032  0183               	clrf	3
   806     0033  120A  118A  2A89   	ljmp	_main	;jump to C main() function
   807                           
   808                           	psect	bssBANK0
   809     0045                     __pbssBANK0:
   810     0045                     _contador:
   811     0045                     	ds	2
   812     0047                     _opcion:
   813     0047                     	ds	2
   814     0049                     _CONT:
   815     0049                     	ds	1
   816     004A                     _CVPOT:
   817     004A                     	ds	15
   818                           
   819                           	psect	bssBANK1
   820     00CD                     __pbssBANK1:
   821     00CD                     _voltaje:
   822     00CD                     	ds	2
   823     00CF                     _numero:
   824     00CF                     	ds	2
   825                           
   826                           	psect	dataBANK3
   827     0190                     __pdataBANK3:
   828     0190                     _menu:
   829     0190                     	ds	66
   830                           
   831                           	psect	inittext
   832     0F83                     init_fetch0:	
   833                           ;	Called with low address in FSR and high address in W
   834                           
   835     0F83  087E               	movf	btemp,w
   836     0F84  008A               	movwf	10
   837     0F85  087F               	movf	btemp+1,w
   838     0F86  0082               	movwf	2
   839     0F87                     init_ram0:	
   840                           ;Called with:
   841                           ;	high address of idata address in btemp 
   842                           ;	low address of idata address in btemp+1 
   843                           ;	low address of data in FSR
   844                           ;	high address + 1 of data in btemp-1
   845                           
   846     0F87  120A  158A  2783  120A  158A  	fcall	init_fetch0
   847     0F8C  0080               	movwf	0
   848     0F8D  0A84               	incf	4,f
   849     0F8E  0804               	movf	4,w
   850     0F8F  067D               	xorwf	btemp+-1,w
   851     0F90  1903               	btfsc	3,2
   852     0F91  3400               	retlw	0
   853     0F92  0AFF               	incf	btemp+1,f
   854     0F93  1903               	btfsc	3,2
   855     0F94  0AFE               	incf	btemp,f
   856     0F95  2F87               	goto	init_ram0
   857                           
   858                           	psect	clrtext
   859     07F8                     clear_ram0:	
   860                           ;	Called with FSR containing the base address, and
   861                           ;	W with the last address+1
   862                           
   863     07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   864     07F9                     clrloop0:
   865     07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   866     07FA  0A84               	incf	4,f	;increment pointer
   867     07FB  0604               	xorwf	4,w	;XOR with final address
   868     07FC  1903               	btfsc	3,2	;have we reached the end yet?
   869     07FD  3400               	retlw	0	;all done for this memory range, return
   870     07FE  0604               	xorwf	4,w	;XOR again to restore value
   871     07FF  2FF9               	goto	clrloop0	;do the next byte
   872                           
   873                           	psect	cstackBANK1
   874     00A0                     __pcstackBANK1:
   875     00A0                     ?_UART_RX_config:
   876     00A0                     ?_UART_TX_config:	
   877                           ; 1 bytes @ 0x0
   878                           
   879     00A0                     ?_adc_init:	
   880                           ; 1 bytes @ 0x0
   881                           
   882     00A0                     ??_Lcd_Port8:	
   883                           ; 1 bytes @ 0x0
   884                           
   885     00A0                     ?___lwdiv:	
   886                           ; 1 bytes @ 0x0
   887                           
   888     00A0                     ?___lmul:	
   889                           ; 2 bytes @ 0x0
   890                           
   891     00A0                     Lcd_Port8@a:	
   892                           ; 4 bytes @ 0x0
   893                           
   894     00A0                     adc_init@channel:	
   895                           ; 1 bytes @ 0x0
   896                           
   897     00A0                     UART_RX_config@baudrate:	
   898                           ; 2 bytes @ 0x0
   899                           
   900     00A0                     UART_TX_config@baudrate:	
   901                           ; 2 bytes @ 0x0
   902                           
   903     00A0                     ___lwdiv@divisor:	
   904                           ; 2 bytes @ 0x0
   905                           
   906     00A0                     ___lmul@multiplier:	
   907                           ; 2 bytes @ 0x0
   908                           
   909                           
   910                           ; 4 bytes @ 0x0
   911     00A0                     	ds	1
   912     00A1                     ??_Lcd_Cmd8:
   913     00A1                     ??_Lcd_Write_Char8:	
   914                           ; 1 bytes @ 0x1
   915                           
   916                           
   917                           ; 1 bytes @ 0x1
   918     00A1                     	ds	1
   919     00A2                     ??_UART_RX_config:
   920     00A2                     ??_UART_TX_config:	
   921                           ; 1 bytes @ 0x2
   922                           
   923     00A2                     ??_adc_init:	
   924                           ; 1 bytes @ 0x2
   925                           
   926     00A2                     Lcd_Write_Char8@y:	
   927                           ; 1 bytes @ 0x2
   928                           
   929     00A2                     ___lwdiv@dividend:	
   930                           ; 1 bytes @ 0x2
   931                           
   932                           
   933                           ; 2 bytes @ 0x2
   934     00A2                     	ds	1
   935     00A3                     ??_setup:
   936     00A3                     Lcd_Cmd8@a:	
   937                           ; 1 bytes @ 0x3
   938                           
   939     00A3                     Lcd_Write_Char8@a:	
   940                           ; 1 bytes @ 0x3
   941                           
   942                           
   943                           ; 1 bytes @ 0x3
   944     00A3                     	ds	1
   945     00A4                     ??_Lcd_Init8:
   946     00A4                     ??_Lcd_Clear8:	
   947                           ; 1 bytes @ 0x4
   948                           
   949     00A4                     ?_Lcd_Set_Cursor8:	
   950                           ; 1 bytes @ 0x4
   951                           
   952     00A4                     ?_Lcd_Write_String8:	
   953                           ; 1 bytes @ 0x4
   954                           
   955     00A4                     ??___lwdiv:	
   956                           ; 1 bytes @ 0x4
   957                           
   958     00A4                     Lcd_Set_Cursor8@b:	
   959                           ; 1 bytes @ 0x4
   960                           
   961     00A4                     Lcd_Write_String8@a:	
   962                           ; 1 bytes @ 0x4
   963                           
   964     00A4                     ___lmul@multiplicand:	
   965                           ; 2 bytes @ 0x4
   966                           
   967                           
   968                           ; 4 bytes @ 0x4
   969     00A4                     	ds	1
   970     00A5                     ??_Lcd_Set_Cursor8:
   971     00A5                     Lcd_Set_Cursor8@a:	
   972                           ; 1 bytes @ 0x5
   973                           
   974     00A5                     ___lwdiv@counter:	
   975                           ; 1 bytes @ 0x5
   976                           
   977                           
   978                           ; 1 bytes @ 0x5
   979     00A5                     	ds	1
   980     00A6                     ??_Lcd_Write_String8:
   981     00A6                     Lcd_Set_Cursor8@temp:	
   982                           ; 1 bytes @ 0x6
   983                           
   984     00A6                     Lcd_Write_String8@i:	
   985                           ; 1 bytes @ 0x6
   986                           
   987     00A6                     ___lwdiv@quotient:	
   988                           ; 2 bytes @ 0x6
   989                           
   990                           
   991                           ; 2 bytes @ 0x6
   992     00A6                     	ds	2
   993     00A8                     ??___lmul:
   994     00A8                     ?___lwmod:	
   995                           ; 1 bytes @ 0x8
   996                           
   997     00A8                     ___lwmod@divisor:	
   998                           ; 2 bytes @ 0x8
   999                           
  1000                           
  1001                           ; 2 bytes @ 0x8
  1002     00A8                     	ds	1
  1003     00A9                     ___lmul@product:
  1004                           
  1005                           ; 4 bytes @ 0x9
  1006     00A9                     	ds	1
  1007     00AA                     ___lwmod@dividend:
  1008                           
  1009                           ; 2 bytes @ 0xA
  1010     00AA                     	ds	2
  1011     00AC                     ??___lwmod:
  1012                           
  1013                           ; 1 bytes @ 0xC
  1014     00AC                     	ds	1
  1015     00AD                     ?___aldiv:
  1016     00AD                     ___lwmod@counter:	
  1017                           ; 4 bytes @ 0xD
  1018                           
  1019     00AD                     ___aldiv@divisor:	
  1020                           ; 1 bytes @ 0xD
  1021                           
  1022                           
  1023                           ; 4 bytes @ 0xD
  1024     00AD                     	ds	1
  1025     00AE                     ?_sprintf:
  1026     00AE                     sprintf@f:	
  1027                           ; 2 bytes @ 0xE
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0xE
  1031     00AE                     	ds	3
  1032     00B1                     ??_sprintf:
  1033     00B1                     ___aldiv@dividend:	
  1034                           ; 1 bytes @ 0x11
  1035                           
  1036                           
  1037                           ; 4 bytes @ 0x11
  1038     00B1                     	ds	3
  1039     00B4                     sprintf@ap:
  1040                           
  1041                           ; 1 bytes @ 0x14
  1042     00B4                     	ds	1
  1043     00B5                     ??___aldiv:
  1044     00B5                     sprintf@flag:	
  1045                           ; 1 bytes @ 0x15
  1046                           
  1047                           
  1048                           ; 1 bytes @ 0x15
  1049     00B5                     	ds	1
  1050     00B6                     sprintf@prec:
  1051     00B6                     ___aldiv@counter:	
  1052                           ; 1 bytes @ 0x16
  1053                           
  1054                           
  1055                           ; 1 bytes @ 0x16
  1056     00B6                     	ds	1
  1057     00B7                     ___aldiv@sign:
  1058     00B7                     sprintf@val:	
  1059                           ; 1 bytes @ 0x17
  1060                           
  1061                           
  1062                           ; 2 bytes @ 0x17
  1063     00B7                     	ds	1
  1064     00B8                     ___aldiv@quotient:
  1065                           
  1066                           ; 4 bytes @ 0x18
  1067     00B8                     	ds	1
  1068     00B9                     sprintf@sp:
  1069                           
  1070                           ; 1 bytes @ 0x19
  1071     00B9                     	ds	1
  1072     00BA                     sprintf@c:
  1073                           
  1074                           ; 1 bytes @ 0x1A
  1075     00BA                     	ds	2
  1076     00BC                     ?_map:
  1077     00BC                     map@val:	
  1078                           ; 2 bytes @ 0x1C
  1079                           
  1080                           
  1081                           ; 2 bytes @ 0x1C
  1082     00BC                     	ds	2
  1083     00BE                     map@minx:
  1084                           
  1085                           ; 2 bytes @ 0x1E
  1086     00BE                     	ds	2
  1087     00C0                     map@maxx:
  1088                           
  1089                           ; 2 bytes @ 0x20
  1090     00C0                     	ds	2
  1091     00C2                     map@miny:
  1092                           
  1093                           ; 2 bytes @ 0x22
  1094     00C2                     	ds	2
  1095     00C4                     map@maxy:
  1096                           
  1097                           ; 2 bytes @ 0x24
  1098     00C4                     	ds	2
  1099     00C6                     ??_map:
  1100     00C6                     map@vo:	
  1101                           ; 1 bytes @ 0x26
  1102                           
  1103                           
  1104                           ; 2 bytes @ 0x26
  1105     00C6                     	ds	2
  1106     00C8                     ??_POT:
  1107                           
  1108                           ; 1 bytes @ 0x28
  1109     00C8                     	ds	2
  1110     00CA                     ??_main:
  1111                           
  1112                           ; 1 bytes @ 0x2A
  1113     00CA                     	ds	3
  1114                           
  1115                           	psect	cstackCOMMON
  1116     0070                     __pcstackCOMMON:
  1117     0070                     ?_UART_write_char:
  1118     0070                     ?_UART_read_char:	
  1119                           ; 1 bytes @ 0x0
  1120                           
  1121     0070                     ?_setup:	
  1122                           ; 1 bytes @ 0x0
  1123                           
  1124     0070                     ?_Lcd_Init8:	
  1125                           ; 1 bytes @ 0x0
  1126                           
  1127     0070                     ?_Lcd_Clear8:	
  1128                           ; 1 bytes @ 0x0
  1129                           
  1130     0070                     ?_POT:	
  1131                           ; 1 bytes @ 0x0
  1132                           
  1133     0070                     ?_isr:	
  1134                           ; 1 bytes @ 0x0
  1135                           
  1136     0070                     ?_main:	
  1137                           ; 1 bytes @ 0x0
  1138                           
  1139     0070                     ?_Lcd_Port8:	
  1140                           ; 1 bytes @ 0x0
  1141                           
  1142     0070                     ?_Lcd_Cmd8:	
  1143                           ; 1 bytes @ 0x0
  1144                           
  1145     0070                     ?_Lcd_Write_Char8:	
  1146                           ; 1 bytes @ 0x0
  1147                           
  1148     0070                     ?_adc_read:	
  1149                           ; 1 bytes @ 0x0
  1150                           
  1151     0070                     ?i1___lwdiv:	
  1152                           ; 2 bytes @ 0x0
  1153                           
  1154     0070                     UART_write_char@txt:	
  1155                           ; 2 bytes @ 0x0
  1156                           
  1157     0070                     i1___lwdiv@divisor:	
  1158                           ; 2 bytes @ 0x0
  1159                           
  1160                           
  1161                           ; 2 bytes @ 0x0
  1162     0070                     	ds	2
  1163     0072                     ??_UART_write_char:
  1164     0072                     ??_adc_read:	
  1165                           ; 1 bytes @ 0x2
  1166                           
  1167     0072                     i1___lwdiv@dividend:	
  1168                           ; 1 bytes @ 0x2
  1169                           
  1170                           
  1171                           ; 2 bytes @ 0x2
  1172     0072                     	ds	2
  1173     0074                     ??i1___lwdiv:
  1174                           
  1175                           ; 1 bytes @ 0x4
  1176     0074                     	ds	1
  1177     0075                     UART_write_char@i:
  1178     0075                     i1___lwdiv@quotient:	
  1179                           ; 2 bytes @ 0x5
  1180                           
  1181                           
  1182                           ; 2 bytes @ 0x5
  1183     0075                     	ds	2
  1184     0077                     i1___lwdiv@counter:
  1185                           
  1186                           ; 1 bytes @ 0x7
  1187     0077                     	ds	1
  1188     0078                     ?i1___lwmod:
  1189     0078                     i1___lwmod@divisor:	
  1190                           ; 2 bytes @ 0x8
  1191                           
  1192                           
  1193                           ; 2 bytes @ 0x8
  1194     0078                     	ds	2
  1195     007A                     i1___lwmod@dividend:
  1196                           
  1197                           ; 2 bytes @ 0xA
  1198     007A                     	ds	2
  1199     007C                     ??i1___lwmod:
  1200                           
  1201                           ; 1 bytes @ 0xC
  1202     007C                     	ds	1
  1203     007D                     i1___lwmod@counter:
  1204                           
  1205                           ; 1 bytes @ 0xD
  1206     007D                     	ds	1
  1207                           
  1208                           	psect	cstackBANK0
  1209     0020                     __pcstackBANK0:
  1210     0020                     ?i1_sprintf:
  1211     0020                     i1sprintf@f:	
  1212                           ; 2 bytes @ 0x0
  1213                           
  1214                           
  1215                           ; 1 bytes @ 0x0
  1216     0020                     	ds	3
  1217     0023                     ??i1_sprintf:
  1218                           
  1219                           ; 1 bytes @ 0x3
  1220     0023                     	ds	3
  1221     0026                     i1sprintf@ap:
  1222                           
  1223                           ; 1 bytes @ 0x6
  1224     0026                     	ds	1
  1225     0027                     i1sprintf@flag:
  1226                           
  1227                           ; 1 bytes @ 0x7
  1228     0027                     	ds	1
  1229     0028                     i1sprintf@prec:
  1230                           
  1231                           ; 1 bytes @ 0x8
  1232     0028                     	ds	1
  1233     0029                     i1sprintf@val:
  1234                           
  1235                           ; 2 bytes @ 0x9
  1236     0029                     	ds	2
  1237     002B                     i1sprintf@sp:
  1238                           
  1239                           ; 1 bytes @ 0xB
  1240     002B                     	ds	1
  1241     002C                     i1sprintf@c:
  1242                           
  1243                           ; 1 bytes @ 0xC
  1244     002C                     	ds	1
  1245     002D                     ??_UART_read_char:
  1246                           
  1247                           ; 1 bytes @ 0xD
  1248     002D                     	ds	2
  1249     002F                     UART_read_char@CONT:
  1250                           
  1251                           ; 15 bytes @ 0xF
  1252     002F                     	ds	15
  1253     003E                     UART_read_char@caracter:
  1254                           
  1255                           ; 1 bytes @ 0x1E
  1256     003E                     	ds	1
  1257     003F                     ??_isr:
  1258                           
  1259                           ; 1 bytes @ 0x1F
  1260     003F                     	ds	6
  1261                           
  1262                           	psect	maintext
  1263     0289                     __pmaintext:	
  1264 ;;
  1265 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1266 ;;
  1267 ;; *************** function _main *****************
  1268 ;; Defined at:
  1269 ;;		line 94 in file "Lab02.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  a               2    0        unsigned int 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  1    wreg      void 
  1276 ;; Registers used:
  1277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : B00/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1283 ;;      Params:         0       0       0       0       0
  1284 ;;      Locals:         0       0       0       0       0
  1285 ;;      Temps:          0       0       3       0       0
  1286 ;;      Totals:         0       0       3       0       0
  1287 ;;Total ram usage:        3 bytes
  1288 ;; Hardware stack levels required when called: 7
  1289 ;; This function calls:
  1290 ;;		_Lcd_Clear8
  1291 ;;		_Lcd_Init8
  1292 ;;		_Lcd_Set_Cursor8
  1293 ;;		_Lcd_Write_String8
  1294 ;;		_POT
  1295 ;;		_setup
  1296 ;; This function is called by:
  1297 ;;		Startup code after reset
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301     0289                     _main:	
  1302                           ;psect for function _main
  1303                           
  1304     0289                     l2603:	
  1305                           ;incstack = 0
  1306                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1307                           
  1308                           
  1309                           ;Lab02.c: 95:     setup();
  1310     0289  120A  118A  2766  120A  118A  	fcall	_setup
  1311     028E                     l2605:
  1312                           
  1313                           ;Lab02.c: 96:     Lcd_Init8();
  1314     028E  120A  118A  23FB  120A  118A  	fcall	_Lcd_Init8
  1315     0293                     l2607:
  1316                           
  1317                           ;Lab02.c: 97:     Lcd_Clear8();
  1318     0293  120A  158A  2776  120A  118A  	fcall	_Lcd_Clear8
  1319     0298                     l2609:
  1320                           
  1321                           ;Lab02.c: 101:     {;Lab02.c: 103:         POT();
  1322     0298  120A  118A  2671  120A  118A  	fcall	_POT
  1323     029D                     l2611:
  1324                           
  1325                           ;Lab02.c: 104:         Lcd_Set_Cursor8(1,1);
  1326     029D  1683               	bsf	3,5	;RP0=1, select bank1
  1327     029E  1303               	bcf	3,6	;RP1=0, select bank1
  1328     029F  01A4               	clrf	Lcd_Set_Cursor8@b^(0+128)
  1329     02A0  0AA4               	incf	Lcd_Set_Cursor8@b^(0+128),f
  1330     02A1  3001               	movlw	1
  1331     02A2  120A  118A  27D6  120A  118A  	fcall	_Lcd_Set_Cursor8
  1332     02A7                     l2613:
  1333                           
  1334                           ;Lab02.c: 105:         Lcd_Write_String8("Volt");
  1335     02A7  3041               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1336     02A8  1683               	bsf	3,5	;RP0=1, select bank1
  1337     02A9  1303               	bcf	3,6	;RP1=0, select bank1
  1338     02AA  00A4               	movwf	Lcd_Write_String8@a^(0+128)
  1339     02AB  3080               	movlw	128
  1340     02AC  00A5               	movwf	(Lcd_Write_String8@a+1)^(0+128)
  1341     02AD  120A  118A  279E  120A  118A  	fcall	_Lcd_Write_String8
  1342     02B2                     l2615:
  1343                           
  1344                           ;Lab02.c: 106:         Lcd_Set_Cursor8(2,1);
  1345     02B2  1683               	bsf	3,5	;RP0=1, select bank1
  1346     02B3  1303               	bcf	3,6	;RP1=0, select bank1
  1347     02B4  01A4               	clrf	Lcd_Set_Cursor8@b^(0+128)
  1348     02B5  0AA4               	incf	Lcd_Set_Cursor8@b^(0+128),f
  1349     02B6  3002               	movlw	2
  1350     02B7  120A  118A  27D6  120A  118A  	fcall	_Lcd_Set_Cursor8
  1351     02BC                     l2617:
  1352                           
  1353                           ;Lab02.c: 107:         Lcd_Write_String8(CVPOT);
  1354     02BC  304A               	movlw	(low (_CVPOT| 0))& (0+255)
  1355     02BD  1683               	bsf	3,5	;RP0=1, select bank1
  1356     02BE  1303               	bcf	3,6	;RP1=0, select bank1
  1357     02BF  00A4               	movwf	Lcd_Write_String8@a^(0+128)
  1358     02C0  3000               	movlw	0
  1359     02C1  00A5               	movwf	(Lcd_Write_String8@a+1)^(0+128)
  1360     02C2  120A  118A  279E  120A  118A  	fcall	_Lcd_Write_String8
  1361     02C7                     l2619:
  1362                           
  1363                           ;Lab02.c: 108:         Lcd_Set_Cursor8(1,8);
  1364     02C7  3008               	movlw	8
  1365     02C8  1683               	bsf	3,5	;RP0=1, select bank1
  1366     02C9  1303               	bcf	3,6	;RP1=0, select bank1
  1367     02CA  00A4               	movwf	Lcd_Set_Cursor8@b^(0+128)
  1368     02CB  3001               	movlw	1
  1369     02CC  120A  118A  27D6  120A  118A  	fcall	_Lcd_Set_Cursor8
  1370     02D1                     l2621:
  1371                           
  1372                           ;Lab02.c: 109:         Lcd_Write_String8("Cont");
  1373     02D1  3046               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1374     02D2  1683               	bsf	3,5	;RP0=1, select bank1
  1375     02D3  1303               	bcf	3,6	;RP1=0, select bank1
  1376     02D4  00A4               	movwf	Lcd_Write_String8@a^(0+128)
  1377     02D5  3080               	movlw	128
  1378     02D6  00A5               	movwf	(Lcd_Write_String8@a+1)^(0+128)
  1379     02D7  120A  118A  279E  120A  118A  	fcall	_Lcd_Write_String8
  1380     02DC                     l2623:
  1381                           
  1382                           ;Lab02.c: 110:         Lcd_Set_Cursor8(2,9);
  1383     02DC  3009               	movlw	9
  1384     02DD  1683               	bsf	3,5	;RP0=1, select bank1
  1385     02DE  1303               	bcf	3,6	;RP1=0, select bank1
  1386     02DF  00A4               	movwf	Lcd_Set_Cursor8@b^(0+128)
  1387     02E0  3002               	movlw	2
  1388     02E1  120A  118A  27D6  120A  118A  	fcall	_Lcd_Set_Cursor8
  1389     02E6                     l2625:
  1390                           
  1391                           ;Lab02.c: 111:         Lcd_Write_String8(CONT);
  1392     02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1393     02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1394     02E8  0849               	movf	_CONT,w
  1395     02E9  1683               	bsf	3,5	;RP0=1, select bank1
  1396     02EA  1303               	bcf	3,6	;RP1=0, select bank1
  1397     02EB  00CA               	movwf	??_main^(0+128)
  1398     02EC  01CB               	clrf	(??_main^(0+128)+1)
  1399     02ED  084A               	movf	??_main^(0+128),w
  1400     02EE  00A4               	movwf	Lcd_Write_String8@a^(0+128)
  1401     02EF  084B               	movf	(??_main^(0+128)+1),w
  1402     02F0  00A5               	movwf	(Lcd_Write_String8@a+1)^(0+128)
  1403     02F1  120A  118A  279E  120A  118A  	fcall	_Lcd_Write_String8
  1404     02F6                     l2627:
  1405                           
  1406                           ;Lab02.c: 113:         if (ADCON0bits.GO == 0) {
  1407     02F6  1283               	bcf	3,5	;RP0=0, select bank0
  1408     02F7  1303               	bcf	3,6	;RP1=0, select bank0
  1409     02F8  189F               	btfsc	31,1	;volatile
  1410     02F9  2AFB               	goto	u2191
  1411     02FA  2AFC               	goto	u2190
  1412     02FB                     u2191:
  1413     02FB  2B09               	goto	l2633
  1414     02FC                     u2190:
  1415     02FC                     l2629:
  1416                           
  1417                           ;Lab02.c: 115:             _delay((unsigned long)((1000)*(8000000/4000000.0)));
  1418     02FC  3003               	movlw	3
  1419     02FD  1683               	bsf	3,5	;RP0=1, select bank1
  1420     02FE  1303               	bcf	3,6	;RP1=0, select bank1
  1421     02FF  00CB               	movwf	(??_main^(0+128)+1)
  1422     0300  3097               	movlw	151
  1423     0301  00CA               	movwf	??_main^(0+128)
  1424     0302                     u2217:
  1425     0302  0BCA               	decfsz	??_main^(0+128),f
  1426     0303  2B02               	goto	u2217
  1427     0304  0BCB               	decfsz	(??_main^(0+128)+1),f
  1428     0305  2B02               	goto	u2217
  1429     0306                     l2631:
  1430                           
  1431                           ;Lab02.c: 116:             ADCON0bits.GO = 1;
  1432     0306  1283               	bcf	3,5	;RP0=0, select bank0
  1433     0307  1303               	bcf	3,6	;RP1=0, select bank0
  1434     0308  149F               	bsf	31,1	;volatile
  1435     0309                     l2633:
  1436                           
  1437                           ;Lab02.c: 119:         if (PIR1bits.RCIF == 0){
  1438     0309  1A8C               	btfsc	12,5	;volatile
  1439     030A  2B0C               	goto	u2201
  1440     030B  2B0D               	goto	u2200
  1441     030C                     u2201:
  1442     030C  2A98               	goto	l2609
  1443     030D                     u2200:
  1444     030D                     l2635:
  1445                           
  1446                           ;Lab02.c: 120:             _delay((unsigned long)((500)*(8000000/4000.0)));
  1447     030D  3006               	movlw	6
  1448     030E  1683               	bsf	3,5	;RP0=1, select bank1
  1449     030F  1303               	bcf	3,6	;RP1=0, select bank1
  1450     0310  00CC               	movwf	(??_main^(0+128)+2)
  1451     0311  3013               	movlw	19
  1452     0312  00CB               	movwf	(??_main^(0+128)+1)
  1453     0313  30AD               	movlw	173
  1454     0314  00CA               	movwf	??_main^(0+128)
  1455     0315                     u2227:
  1456     0315  0BCA               	decfsz	??_main^(0+128),f
  1457     0316  2B15               	goto	u2227
  1458     0317  0BCB               	decfsz	(??_main^(0+128)+1),f
  1459     0318  2B15               	goto	u2227
  1460     0319  0BCC               	decfsz	(??_main^(0+128)+2),f
  1461     031A  2B15               	goto	u2227
  1462     031B  2A98               	goto	l2609
  1463     031C  120A  118A  2812   	ljmp	start
  1464     031F                     __end_of_main:
  1465                           
  1466                           	psect	text1
  1467     0766                     __ptext1:	
  1468 ;; *************** function _setup *****************
  1469 ;; Defined at:
  1470 ;;		line 138 in file "Lab02.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       0       0       0
  1485 ;;      Locals:         0       0       0       0       0
  1486 ;;      Temps:          0       0       0       0       0
  1487 ;;      Totals:         0       0       0       0       0
  1488 ;;Total ram usage:        0 bytes
  1489 ;; Hardware stack levels used: 1
  1490 ;; Hardware stack levels required when called: 5
  1491 ;; This function calls:
  1492 ;;		_UART_RX_config
  1493 ;;		_UART_TX_config
  1494 ;;		_adc_init
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500     0766                     _setup:	
  1501                           ;psect for function _setup
  1502                           
  1503     0766                     l2525:	
  1504                           ;incstack = 0
  1505                           ; Regs used in _setup: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1506                           
  1507                           
  1508                           ;Lab02.c: 139:     adc_init(0);
  1509     0766  3000               	movlw	0
  1510     0767  1683               	bsf	3,5	;RP0=1, select bank1
  1511     0768  1303               	bcf	3,6	;RP1=0, select bank1
  1512     0769  00A0               	movwf	adc_init@channel^(0+128)
  1513     076A  00A1               	movwf	(adc_init@channel+1)^(0+128)
  1514     076B  120A  118A  26B1  120A  118A  	fcall	_adc_init
  1515     0770                     l2527:
  1516                           
  1517                           ;Lab02.c: 140:     UART_RX_config(9600);
  1518     0770  3080               	movlw	128
  1519     0771  1683               	bsf	3,5	;RP0=1, select bank1
  1520     0772  1303               	bcf	3,6	;RP1=0, select bank1
  1521     0773  00A0               	movwf	UART_RX_config@baudrate^(0+128)
  1522     0774  3025               	movlw	37
  1523     0775  00A1               	movwf	(UART_RX_config@baudrate^(0+128)+1)
  1524     0776  120A  118A  2525  120A  118A  	fcall	_UART_RX_config
  1525     077B                     l2529:
  1526                           
  1527                           ;Lab02.c: 141:     UART_TX_config(9600);
  1528     077B  3080               	movlw	128
  1529     077C  1683               	bsf	3,5	;RP0=1, select bank1
  1530     077D  1303               	bcf	3,6	;RP1=0, select bank1
  1531     077E  00A0               	movwf	UART_TX_config@baudrate^(0+128)
  1532     077F  3025               	movlw	37
  1533     0780  00A1               	movwf	(UART_TX_config@baudrate^(0+128)+1)
  1534     0781  120A  118A  2631  120A  118A  	fcall	_UART_TX_config
  1535     0786                     l2531:
  1536                           
  1537                           ;Lab02.c: 143:     ANSELbits.ANS0 = 1;
  1538     0786  1683               	bsf	3,5	;RP0=1, select bank3
  1539     0787  1703               	bsf	3,6	;RP1=1, select bank3
  1540     0788  1408               	bsf	8,0	;volatile
  1541     0789                     l2533:
  1542                           
  1543                           ;Lab02.c: 144:     ANSELH = 0;
  1544     0789  0189               	clrf	9	;volatile
  1545     078A                     l2535:
  1546                           
  1547                           ;Lab02.c: 147:     TRISA = 0b11111111;
  1548     078A  30FF               	movlw	255
  1549     078B  1683               	bsf	3,5	;RP0=1, select bank1
  1550     078C  1303               	bcf	3,6	;RP1=0, select bank1
  1551     078D  0085               	movwf	5	;volatile
  1552     078E                     l2537:
  1553                           
  1554                           ;Lab02.c: 148:     TRISC = 0b11000000;
  1555     078E  30C0               	movlw	192
  1556     078F  0087               	movwf	7	;volatile
  1557     0790                     l2539:
  1558                           
  1559                           ;Lab02.c: 151:     TRISB = 0;
  1560     0790  0186               	clrf	6	;volatile
  1561     0791                     l2541:
  1562                           
  1563                           ;Lab02.c: 152:     TRISD = 0;
  1564     0791  0188               	clrf	8	;volatile
  1565     0792                     l2543:
  1566                           
  1567                           ;Lab02.c: 155:     PORTA = 0;
  1568     0792  1283               	bcf	3,5	;RP0=0, select bank0
  1569     0793  1303               	bcf	3,6	;RP1=0, select bank0
  1570     0794  0185               	clrf	5	;volatile
  1571     0795                     l2545:
  1572                           
  1573                           ;Lab02.c: 156:     PORTB = 0;
  1574     0795  0186               	clrf	6	;volatile
  1575     0796                     l2547:
  1576                           
  1577                           ;Lab02.c: 157:     PORTC = 0;
  1578     0796  0187               	clrf	7	;volatile
  1579     0797                     l2549:
  1580                           
  1581                           ;Lab02.c: 158:     PORTD = 0;
  1582     0797  0188               	clrf	8	;volatile
  1583     0798                     l2551:
  1584                           
  1585                           ;Lab02.c: 159:     PORTE = 0;
  1586     0798  0189               	clrf	9	;volatile
  1587     0799                     l2553:
  1588                           
  1589                           ;Lab02.c: 161:     OSCCONbits.IRCF = 0b111;
  1590     0799  3070               	movlw	112
  1591     079A  1683               	bsf	3,5	;RP0=1, select bank1
  1592     079B  1303               	bcf	3,6	;RP1=0, select bank1
  1593     079C  048F               	iorwf	15,f	;volatile
  1594     079D                     l196:
  1595     079D  0008               	return
  1596     079E                     __end_of_setup:
  1597                           
  1598                           	psect	text2
  1599     06B1                     __ptext2:	
  1600 ;; *************** function _adc_init *****************
  1601 ;; Defined at:
  1602 ;;		line 17 in file "ADC.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  channel         2    0[BANK1 ] int 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0, btemp+1
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1616 ;;      Params:         0       0       2       0       0
  1617 ;;      Locals:         0       0       0       0       0
  1618 ;;      Temps:          0       0       1       0       0
  1619 ;;      Totals:         0       0       3       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used: 1
  1622 ;; Hardware stack levels required when called: 4
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_setup
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630     06B1                     _adc_init:	
  1631                           ;psect for function _adc_init
  1632                           
  1633     06B1                     l2357:	
  1634                           ;incstack = 0
  1635                           ; Regs used in _adc_init: [wreg+status,2+status,0+btemp+1]
  1636                           
  1637                           
  1638                           ;ADC.c: 18:     if(channel <= 13){
  1639     06B1  1683               	bsf	3,5	;RP0=1, select bank1
  1640     06B2  1303               	bcf	3,6	;RP1=0, select bank1
  1641     06B3  0821               	movf	(adc_init@channel+1)^(0+128),w
  1642     06B4  3A80               	xorlw	128
  1643     06B5  00FF               	movwf	btemp+1
  1644     06B6  3080               	movlw	128
  1645     06B7  027F               	subwf	btemp+1,w
  1646     06B8  1D03               	skipz
  1647     06B9  2EBC               	goto	u2005
  1648     06BA  300E               	movlw	14
  1649     06BB  0220               	subwf	adc_init@channel^(0+128),w
  1650     06BC                     u2005:
  1651     06BC  1803               	skipnc
  1652     06BD  2EBF               	goto	u2001
  1653     06BE  2EC0               	goto	u2000
  1654     06BF                     u2001:
  1655     06BF  2ED2               	goto	l2361
  1656     06C0                     u2000:
  1657     06C0                     l2359:
  1658                           
  1659                           ;ADC.c: 19:         ADCON0bits.CHS = channel;
  1660     06C0  1683               	bsf	3,5	;RP0=1, select bank1
  1661     06C1  1303               	bcf	3,6	;RP1=0, select bank1
  1662     06C2  0820               	movf	adc_init@channel^(0+128),w
  1663     06C3  00A2               	movwf	??_adc_init^(0+128)
  1664     06C4  0DA2               	rlf	??_adc_init^(0+128),f
  1665     06C5  0DA2               	rlf	??_adc_init^(0+128),f
  1666     06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1667     06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1668     06C8  081F               	movf	31,w	;volatile
  1669     06C9  1683               	bsf	3,5	;RP0=1, select bank1
  1670     06CA  1303               	bcf	3,6	;RP1=0, select bank1
  1671     06CB  0622               	xorwf	??_adc_init^(0+128),w
  1672     06CC  39C3               	andlw	-61
  1673     06CD  0622               	xorwf	??_adc_init^(0+128),w
  1674     06CE  1283               	bcf	3,5	;RP0=0, select bank0
  1675     06CF  1303               	bcf	3,6	;RP1=0, select bank0
  1676     06D0  009F               	movwf	31	;volatile
  1677                           
  1678                           ;ADC.c: 20:     }
  1679     06D1  2ED6               	goto	l2363
  1680     06D2                     l2361:
  1681                           
  1682                           ;ADC.c: 22:         ADCON0bits.CHS = 0b0000;
  1683     06D2  30C3               	movlw	-61
  1684     06D3  1283               	bcf	3,5	;RP0=0, select bank0
  1685     06D4  1303               	bcf	3,6	;RP1=0, select bank0
  1686     06D5  059F               	andwf	31,f	;volatile
  1687     06D6                     l2363:
  1688                           
  1689                           ;ADC.c: 26:     ADCON1bits.VCFG0 = 0;
  1690     06D6  1683               	bsf	3,5	;RP0=1, select bank1
  1691     06D7  1303               	bcf	3,6	;RP1=0, select bank1
  1692     06D8  121F               	bcf	31,4	;volatile
  1693     06D9                     l2365:
  1694                           
  1695                           ;ADC.c: 27:     ADCON1bits.VCFG1 = 0;
  1696     06D9  129F               	bcf	31,5	;volatile
  1697                           
  1698                           ;ADC.c: 28:     ADCON0bits.ADCS = 0b10;
  1699     06DA  1283               	bcf	3,5	;RP0=0, select bank0
  1700     06DB  1303               	bcf	3,6	;RP1=0, select bank0
  1701     06DC  081F               	movf	31,w	;volatile
  1702     06DD  393F               	andlw	-193
  1703     06DE  3880               	iorlw	128
  1704     06DF  009F               	movwf	31	;volatile
  1705     06E0                     l2367:
  1706                           
  1707                           ;ADC.c: 30:     ADCON1bits.ADFM = 0;
  1708     06E0  1683               	bsf	3,5	;RP0=1, select bank1
  1709     06E1  1303               	bcf	3,6	;RP1=0, select bank1
  1710     06E2  139F               	bcf	31,7	;volatile
  1711     06E3                     l2369:
  1712                           
  1713                           ;ADC.c: 31:     ADCON0bits.ADON = 1;
  1714     06E3  1283               	bcf	3,5	;RP0=0, select bank0
  1715     06E4  1303               	bcf	3,6	;RP1=0, select bank0
  1716     06E5  141F               	bsf	31,0	;volatile
  1717     06E6                     l2371:
  1718                           
  1719                           ;ADC.c: 34:     PIR1bits.ADIF = 0;
  1720     06E6  130C               	bcf	12,6	;volatile
  1721     06E7                     l2373:
  1722                           
  1723                           ;ADC.c: 35:     INTCONbits.PEIE = 1;
  1724     06E7  170B               	bsf	11,6	;volatile
  1725     06E8                     l2375:
  1726                           
  1727                           ;ADC.c: 36:     PIE1bits.ADIE = 1;
  1728     06E8  1683               	bsf	3,5	;RP0=1, select bank1
  1729     06E9  1303               	bcf	3,6	;RP1=0, select bank1
  1730     06EA  170C               	bsf	12,6	;volatile
  1731     06EB                     l2377:
  1732                           
  1733                           ;ADC.c: 37:     INTCONbits.GIE = 1;
  1734     06EB  178B               	bsf	11,7	;volatile
  1735     06EC                     l2379:
  1736                           
  1737                           ;ADC.c: 38:     ADCON0bits.GO = 1;
  1738     06EC  1283               	bcf	3,5	;RP0=0, select bank0
  1739     06ED  1303               	bcf	3,6	;RP1=0, select bank0
  1740     06EE  149F               	bsf	31,1	;volatile
  1741     06EF                     l17:
  1742     06EF  0008               	return
  1743     06F0                     __end_of_adc_init:
  1744                           
  1745                           	psect	text3
  1746     0631                     __ptext3:	
  1747 ;; *************** function _UART_TX_config *****************
  1748 ;; Defined at:
  1749 ;;		line 49 in file "USART.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  baudrate        2    0[BANK1 ] unsigned int 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1763 ;;      Params:         0       0       2       0       0
  1764 ;;      Locals:         0       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0
  1766 ;;      Totals:         0       0       2       0       0
  1767 ;;Total ram usage:        2 bytes
  1768 ;; Hardware stack levels used: 1
  1769 ;; Hardware stack levels required when called: 4
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_setup
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777     0631                     _UART_TX_config:	
  1778                           ;psect for function _UART_TX_config
  1779                           
  1780     0631                     l2483:	
  1781                           ;incstack = 0
  1782                           ; Regs used in _UART_TX_config: [wreg+status,2+status,0]
  1783                           
  1784                           
  1785                           ;USART.c: 50:     TXSTAbits.BRGH = 0;
  1786     0631  1683               	bsf	3,5	;RP0=1, select bank1
  1787     0632  1303               	bcf	3,6	;RP1=0, select bank1
  1788     0633  1118               	bcf	24,2	;volatile
  1789                           
  1790                           ;USART.c: 51:     BRG16 = 0;
  1791     0634  1683               	bsf	3,5	;RP0=1, select bank3
  1792     0635  1703               	bsf	3,6	;RP1=1, select bank3
  1793     0636  1187               	bcf	7,3	;volatile
  1794                           
  1795                           ;USART.c: 52:     TXSTAbits.SYNC = 0;
  1796     0637  1683               	bsf	3,5	;RP0=1, select bank1
  1797     0638  1303               	bcf	3,6	;RP1=0, select bank1
  1798     0639  1218               	bcf	24,4	;volatile
  1799                           
  1800                           ;USART.c: 53:     TXSTAbits.TXEN = 1;
  1801     063A  1698               	bsf	24,5	;volatile
  1802                           
  1803                           ;USART.c: 54:     TXIF = 0;
  1804     063B  1283               	bcf	3,5	;RP0=0, select bank0
  1805     063C  1303               	bcf	3,6	;RP1=0, select bank0
  1806     063D  120C               	bcf	12,4	;volatile
  1807     063E                     l2485:
  1808                           
  1809                           ;USART.c: 58:     if(baudrate == 1200){
  1810     063E  30B0               	movlw	176
  1811     063F  1683               	bsf	3,5	;RP0=1, select bank1
  1812     0640  1303               	bcf	3,6	;RP1=0, select bank1
  1813     0641  0620               	xorwf	UART_TX_config@baudrate^(0+128),w
  1814     0642  3004               	movlw	4
  1815     0643  1903               	skipnz
  1816     0644  0621               	xorwf	(UART_TX_config@baudrate+1)^(0+128),w
  1817     0645  1D03               	btfss	3,2
  1818     0646  2E48               	goto	u2121
  1819     0647  2E49               	goto	u2120
  1820     0648                     u2121:
  1821     0648  2E4C               	goto	l2489
  1822     0649                     u2120:
  1823     0649                     l2487:
  1824                           
  1825                           ;USART.c: 59:         SPBRG = 103;
  1826     0649  3067               	movlw	103
  1827     064A  0099               	movwf	25	;volatile
  1828                           
  1829                           ;USART.c: 60:     }
  1830     064B  2E70               	goto	l283
  1831     064C                     l2489:
  1832     064C  3060               	movlw	96
  1833     064D  0620               	xorwf	UART_TX_config@baudrate^(0+128),w
  1834     064E  3009               	movlw	9
  1835     064F  1903               	skipnz
  1836     0650  0621               	xorwf	(UART_TX_config@baudrate+1)^(0+128),w
  1837     0651  1D03               	btfss	3,2
  1838     0652  2E54               	goto	u2131
  1839     0653  2E55               	goto	u2130
  1840     0654                     u2131:
  1841     0654  2E58               	goto	l2493
  1842     0655                     u2130:
  1843     0655                     l2491:
  1844                           
  1845                           ;USART.c: 62:         SPBRG = 51;
  1846     0655  3033               	movlw	51
  1847     0656  0099               	movwf	25	;volatile
  1848                           
  1849                           ;USART.c: 63:     }
  1850     0657  2E70               	goto	l283
  1851     0658                     l2493:
  1852     0658  3080               	movlw	128
  1853     0659  0620               	xorwf	UART_TX_config@baudrate^(0+128),w
  1854     065A  3025               	movlw	37
  1855     065B  1903               	skipnz
  1856     065C  0621               	xorwf	(UART_TX_config@baudrate+1)^(0+128),w
  1857     065D  1D03               	btfss	3,2
  1858     065E  2E60               	goto	u2141
  1859     065F  2E61               	goto	u2140
  1860     0660                     u2141:
  1861     0660  2E64               	goto	l2497
  1862     0661                     u2140:
  1863     0661                     l2495:
  1864                           
  1865                           ;USART.c: 65:         SPBRG = 12;
  1866     0661  300C               	movlw	12
  1867     0662  0099               	movwf	25	;volatile
  1868                           
  1869                           ;USART.c: 66:     }
  1870     0663  2E70               	goto	l283
  1871     0664                     l2497:
  1872     0664  30B1               	movlw	177
  1873     0665  0620               	xorwf	UART_TX_config@baudrate^(0+128),w
  1874     0666  3028               	movlw	40
  1875     0667  1903               	skipnz
  1876     0668  0621               	xorwf	(UART_TX_config@baudrate+1)^(0+128),w
  1877     0669  1D03               	btfss	3,2
  1878     066A  2E6C               	goto	u2151
  1879     066B  2E6D               	goto	u2150
  1880     066C                     u2151:
  1881     066C  2E70               	goto	l277
  1882     066D                     u2150:
  1883     066D                     l2499:
  1884                           
  1885                           ;USART.c: 68:         SPBRG = 11;
  1886     066D  300B               	movlw	11
  1887     066E  0099               	movwf	25	;volatile
  1888     066F  2E70               	goto	l283
  1889     0670                     l277:
  1890     0670                     l283:
  1891     0670  0008               	return
  1892     0671                     __end_of_UART_TX_config:
  1893                           
  1894                           	psect	text4
  1895     0525                     __ptext4:	
  1896 ;; *************** function _UART_RX_config *****************
  1897 ;; Defined at:
  1898 ;;		line 16 in file "USART.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  baudrate        2    0[BANK1 ] unsigned int 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1912 ;;      Params:         0       0       2       0       0
  1913 ;;      Locals:         0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0
  1915 ;;      Totals:         0       0       2       0       0
  1916 ;;Total ram usage:        2 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; Hardware stack levels required when called: 4
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_setup
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926     0525                     _UART_RX_config:	
  1927                           ;psect for function _UART_RX_config
  1928                           
  1929     0525                     l2451:	
  1930                           ;incstack = 0
  1931                           ; Regs used in _UART_RX_config: [wreg+status,2+status,0]
  1932                           
  1933                           
  1934                           ;USART.c: 18:     SPBRGH = 0;
  1935     0525  1683               	bsf	3,5	;RP0=1, select bank1
  1936     0526  1303               	bcf	3,6	;RP1=0, select bank1
  1937     0527  019A               	clrf	26	;volatile
  1938     0528                     l2453:
  1939                           
  1940                           ;USART.c: 19:     BRG16 = 0;
  1941     0528  1683               	bsf	3,5	;RP0=1, select bank3
  1942     0529  1703               	bsf	3,6	;RP1=1, select bank3
  1943     052A  1187               	bcf	7,3	;volatile
  1944     052B                     l2455:
  1945                           
  1946                           ;USART.c: 22:     CREN = 1;
  1947     052B  1283               	bcf	3,5	;RP0=0, select bank0
  1948     052C  1303               	bcf	3,6	;RP1=0, select bank0
  1949     052D  1618               	bsf	24,4	;volatile
  1950     052E                     l2457:
  1951                           
  1952                           ;USART.c: 23:     SPEN = 1;
  1953     052E  1798               	bsf	24,7	;volatile
  1954     052F                     l2459:
  1955                           
  1956                           ;USART.c: 26:     RCSTAbits.RX9 = 0;
  1957     052F  1318               	bcf	24,6	;volatile
  1958     0530                     l2461:
  1959                           
  1960                           ;USART.c: 29:     PIE1bits.RCIE = 1;
  1961     0530  1683               	bsf	3,5	;RP0=1, select bank1
  1962     0531  1303               	bcf	3,6	;RP1=0, select bank1
  1963     0532  168C               	bsf	12,5	;volatile
  1964     0533                     l2463:
  1965                           
  1966                           ;USART.c: 30:     PIR1bits.RCIF = 0;
  1967     0533  1283               	bcf	3,5	;RP0=0, select bank0
  1968     0534  1303               	bcf	3,6	;RP1=0, select bank0
  1969     0535  128C               	bcf	12,5	;volatile
  1970     0536                     l2465:
  1971                           
  1972                           ;USART.c: 34:     if(baudrate == 1200){
  1973     0536  30B0               	movlw	176
  1974     0537  1683               	bsf	3,5	;RP0=1, select bank1
  1975     0538  1303               	bcf	3,6	;RP1=0, select bank1
  1976     0539  0620               	xorwf	UART_RX_config@baudrate^(0+128),w
  1977     053A  3004               	movlw	4
  1978     053B  1903               	skipnz
  1979     053C  0621               	xorwf	(UART_RX_config@baudrate+1)^(0+128),w
  1980     053D  1D03               	btfss	3,2
  1981     053E  2D40               	goto	u2081
  1982     053F  2D41               	goto	u2080
  1983     0540                     u2081:
  1984     0540  2D44               	goto	l2469
  1985     0541                     u2080:
  1986     0541                     l2467:
  1987                           
  1988                           ;USART.c: 35:         SPBRG = 103;
  1989     0541  3067               	movlw	103
  1990     0542  0099               	movwf	25	;volatile
  1991                           
  1992                           ;USART.c: 36:     }
  1993     0543  2D68               	goto	l273
  1994     0544                     l2469:
  1995     0544  3060               	movlw	96
  1996     0545  0620               	xorwf	UART_RX_config@baudrate^(0+128),w
  1997     0546  3009               	movlw	9
  1998     0547  1903               	skipnz
  1999     0548  0621               	xorwf	(UART_RX_config@baudrate+1)^(0+128),w
  2000     0549  1D03               	btfss	3,2
  2001     054A  2D4C               	goto	u2091
  2002     054B  2D4D               	goto	u2090
  2003     054C                     u2091:
  2004     054C  2D50               	goto	l2473
  2005     054D                     u2090:
  2006     054D                     l2471:
  2007                           
  2008                           ;USART.c: 38:         SPBRG = 51;
  2009     054D  3033               	movlw	51
  2010     054E  0099               	movwf	25	;volatile
  2011                           
  2012                           ;USART.c: 39:     }
  2013     054F  2D68               	goto	l273
  2014     0550                     l2473:
  2015     0550  3080               	movlw	128
  2016     0551  0620               	xorwf	UART_RX_config@baudrate^(0+128),w
  2017     0552  3025               	movlw	37
  2018     0553  1903               	skipnz
  2019     0554  0621               	xorwf	(UART_RX_config@baudrate+1)^(0+128),w
  2020     0555  1D03               	btfss	3,2
  2021     0556  2D58               	goto	u2101
  2022     0557  2D59               	goto	u2100
  2023     0558                     u2101:
  2024     0558  2D5C               	goto	l2477
  2025     0559                     u2100:
  2026     0559                     l2475:
  2027                           
  2028                           ;USART.c: 41:         SPBRG = 12;
  2029     0559  300C               	movlw	12
  2030     055A  0099               	movwf	25	;volatile
  2031                           
  2032                           ;USART.c: 42:     }
  2033     055B  2D68               	goto	l273
  2034     055C                     l2477:
  2035     055C  30B1               	movlw	177
  2036     055D  0620               	xorwf	UART_RX_config@baudrate^(0+128),w
  2037     055E  3028               	movlw	40
  2038     055F  1903               	skipnz
  2039     0560  0621               	xorwf	(UART_RX_config@baudrate+1)^(0+128),w
  2040     0561  1D03               	btfss	3,2
  2041     0562  2D64               	goto	u2111
  2042     0563  2D65               	goto	u2110
  2043     0564                     u2111:
  2044     0564  2D68               	goto	l267
  2045     0565                     u2110:
  2046     0565                     l2479:
  2047                           
  2048                           ;USART.c: 44:         SPBRG = 11;
  2049     0565  300B               	movlw	11
  2050     0566  0099               	movwf	25	;volatile
  2051     0567  2D68               	goto	l273
  2052     0568                     l267:
  2053     0568                     l273:
  2054     0568  0008               	return
  2055     0569                     __end_of_UART_RX_config:
  2056                           
  2057                           	psect	text5
  2058     0671                     __ptext5:	
  2059 ;; *************** function _POT *****************
  2060 ;; Defined at:
  2061 ;;		line 128 in file "Lab02.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2075 ;;      Params:         0       0       0       0       0
  2076 ;;      Locals:         0       0       0       0       0
  2077 ;;      Temps:          0       0       2       0       0
  2078 ;;      Totals:         0       0       2       0       0
  2079 ;;Total ram usage:        2 bytes
  2080 ;; Hardware stack levels used: 1
  2081 ;; Hardware stack levels required when called: 6
  2082 ;; This function calls:
  2083 ;;		_map
  2084 ;;		_sprintf
  2085 ;; This function is called by:
  2086 ;;		_main
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090     0671                     _POT:	
  2091                           ;psect for function _POT
  2092                           
  2093     0671                     l2569:	
  2094                           ;incstack = 0
  2095                           ; Regs used in _POT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2096                           
  2097     0671  1283               	bcf	3,5	;RP0=0, select bank0
  2098     0672  1303               	bcf	3,6	;RP1=0, select bank0
  2099     0673  141F               	bsf	31,0	;volatile
  2100     0674                     l2571:
  2101                           
  2102                           ;Lab02.c: 130:         _delay((unsigned long)((10)*(8000000/4000.0)));
  2103     0674  301A               	movlw	26
  2104     0675  1683               	bsf	3,5	;RP0=1, select bank1
  2105     0676  1303               	bcf	3,6	;RP1=0, select bank1
  2106     0677  00C9               	movwf	(??_POT^(0+128)+1)
  2107     0678  30F7               	movlw	247
  2108     0679  00C8               	movwf	??_POT^(0+128)
  2109     067A                     u2237:
  2110     067A  0BC8               	decfsz	??_POT^(0+128),f
  2111     067B  2E7A               	goto	u2237
  2112     067C  0BC9               	decfsz	(??_POT^(0+128)+1),f
  2113     067D  2E7A               	goto	u2237
  2114     067E  2E7F               	nop2
  2115     067F                     l2573:
  2116                           
  2117                           ;Lab02.c: 131:         ADCON0bits.GO = 1;
  2118     067F  1283               	bcf	3,5	;RP0=0, select bank0
  2119     0680  1303               	bcf	3,6	;RP1=0, select bank0
  2120     0681  149F               	bsf	31,1	;volatile
  2121     0682                     l2575:
  2122                           
  2123                           ;Lab02.c: 132:         voltaje = map(numero, 0, 255, 0, 5);
  2124     0682  1683               	bsf	3,5	;RP0=1, select bank1
  2125     0683  1303               	bcf	3,6	;RP1=0, select bank1
  2126     0684  0850               	movf	(_numero+1)^(0+128),w
  2127     0685  00BD               	movwf	(map@val+1)^(0+128)
  2128     0686  084F               	movf	_numero^(0+128),w
  2129     0687  00BC               	movwf	map@val^(0+128)
  2130     0688  3000               	movlw	0
  2131     0689  00BE               	movwf	map@minx^(0+128)
  2132     068A  00BF               	movwf	(map@minx+1)^(0+128)
  2133     068B  30FF               	movlw	255
  2134     068C  00C0               	movwf	map@maxx^(0+128)
  2135     068D  3000               	movlw	0
  2136     068E  00C1               	movwf	(map@maxx^(0+128)+1)
  2137     068F  3000               	movlw	0
  2138     0690  00C2               	movwf	map@miny^(0+128)
  2139     0691  00C3               	movwf	(map@miny+1)^(0+128)
  2140     0692  3005               	movlw	5
  2141     0693  00C4               	movwf	map@maxy^(0+128)
  2142     0694  3000               	movlw	0
  2143     0695  00C5               	movwf	(map@maxy^(0+128)+1)
  2144     0696  120A  118A  244B  120A  118A  	fcall	_map
  2145     069B  1683               	bsf	3,5	;RP0=1, select bank1
  2146     069C  1303               	bcf	3,6	;RP1=0, select bank1
  2147     069D  083D               	movf	(?_map+1)^(0+128),w
  2148     069E  00CE               	movwf	(_voltaje+1)^(0+128)
  2149     069F  083C               	movf	?_map^(0+128),w
  2150     06A0  00CD               	movwf	_voltaje^(0+128)
  2151     06A1                     l2577:
  2152                           
  2153                           ;Lab02.c: 133:         sprintf(CVPOT, "%d\r", voltaje);
  2154     06A1  304B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2155     06A2  00AE               	movwf	sprintf@f^(0+128)
  2156     06A3  084E               	movf	(_voltaje+1)^(0+128),w
  2157     06A4  00B0               	movwf	((?_sprintf+1)^(0+128)+1)
  2158     06A5  084D               	movf	_voltaje^(0+128),w
  2159     06A6  00AF               	movwf	(?_sprintf^(0+128)+1)
  2160     06A7  304A               	movlw	(low (_CVPOT| 0))& (0+255)
  2161     06A8  120A  118A  2036  120A  118A  	fcall	_sprintf
  2162     06AD                     l2579:
  2163                           
  2164                           ;Lab02.c: 134:         ADON = 0;
  2165     06AD  1283               	bcf	3,5	;RP0=0, select bank0
  2166     06AE  1303               	bcf	3,6	;RP1=0, select bank0
  2167     06AF  101F               	bcf	31,0	;volatile
  2168     06B0                     l193:
  2169     06B0  0008               	return
  2170     06B1                     __end_of_POT:
  2171                           
  2172                           	psect	text6
  2173     0036                     __ptext6:	
  2174 ;; *************** function _sprintf *****************
  2175 ;; Defined at:
  2176 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  sp              1    wreg     PTR unsigned char 
  2179 ;;		 -> UART_read_char@CONT(15), CVPOT(15), 
  2180 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  2181 ;;		 -> STR_6(4), STR_5(4), 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  sp              1   25[BANK1 ] PTR unsigned char 
  2184 ;;		 -> UART_read_char@CONT(15), CVPOT(15), 
  2185 ;;  tmpval          4    0        struct .
  2186 ;;  val             2   23[BANK1 ] unsigned int 
  2187 ;;  cp              2    0        PTR const unsigned char 
  2188 ;;  len             2    0        unsigned int 
  2189 ;;  c               1   26[BANK1 ] unsigned char 
  2190 ;;  prec            1   22[BANK1 ] char 
  2191 ;;  flag            1   21[BANK1 ] unsigned char 
  2192 ;;  ap              1   20[BANK1 ] PTR void [1]
  2193 ;;		 -> ?_sprintf(2), 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  2   14[BANK1 ] int 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2203 ;;      Params:         0       0       3       0       0
  2204 ;;      Locals:         0       0       7       0       0
  2205 ;;      Temps:          0       0       3       0       0
  2206 ;;      Totals:         0       0      13       0       0
  2207 ;;Total ram usage:       13 bytes
  2208 ;; Hardware stack levels used: 1
  2209 ;; Hardware stack levels required when called: 5
  2210 ;; This function calls:
  2211 ;;		___lwdiv
  2212 ;;		___lwmod
  2213 ;; This function is called by:
  2214 ;;		_POT
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218     0036                     _sprintf:	
  2219                           ;psect for function _sprintf
  2220                           
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2224                           ;sprintf@sp stored from wreg
  2225     0036  1683               	bsf	3,5	;RP0=1, select bank1
  2226     0037  1303               	bcf	3,6	;RP1=0, select bank1
  2227     0038  00B9               	movwf	sprintf@sp^(0+128)
  2228     0039                     l2389:
  2229                           
  2230                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2231     0039  30AF               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2232     003A  00B4               	movwf	sprintf@ap^(0+128)
  2233                           
  2234                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2235     003B  28FD               	goto	l2441
  2236     003C                     l2391:
  2237                           
  2238                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2239     003C  3025               	movlw	37
  2240     003D  063A               	xorwf	sprintf@c^(0+128),w
  2241     003E  1903               	btfsc	3,2
  2242     003F  2841               	goto	u2011
  2243     0040  2842               	goto	u2010
  2244     0041                     u2011:
  2245     0041  284C               	goto	l2397
  2246     0042                     u2010:
  2247     0042                     l2393:
  2248                           
  2249                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2250     0042  0839               	movf	sprintf@sp^(0+128),w
  2251     0043  0084               	movwf	4
  2252     0044  083A               	movf	sprintf@c^(0+128),w
  2253     0045  1383               	bcf	3,7	;select IRP bank0
  2254     0046  0080               	movwf	0
  2255     0047                     l2395:
  2256     0047  3001               	movlw	1
  2257     0048  00B1               	movwf	??_sprintf^(0+128)
  2258     0049  0831               	movf	??_sprintf^(0+128),w
  2259     004A  07B9               	addwf	sprintf@sp^(0+128),f
  2260                           
  2261                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  2262     004B  28FD               	goto	l2441
  2263     004C                     l2397:
  2264                           
  2265                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2266     004C  01B5               	clrf	sprintf@flag^(0+128)
  2267     004D                     l2401:	
  2268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2269                           
  2270     004D  3001               	movlw	1
  2271     004E  07AE               	addwf	sprintf@f^(0+128),f
  2272     004F  30FF               	movlw	-1
  2273     0050  072E               	addwf	sprintf@f^(0+128),w
  2274     0051  0084               	movwf	4
  2275     0052  120A  118A  23A7  120A  118A  	fcall	stringdir
  2276     0057  00BA               	movwf	sprintf@c^(0+128)
  2277     0058  00B1               	movwf	??_sprintf^(0+128)
  2278     0059  01B2               	clrf	(??_sprintf^(0+128)+1)
  2279                           
  2280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2281                           ; Switch size 1, requested type "simple"
  2282                           ; Number of cases is 1, Range of values is 0 to 0
  2283                           ; switch strategies available:
  2284                           ; Name         Instructions Cycles
  2285                           ; simple_byte            4     3 (average)
  2286                           ; direct_byte           11     8 (fixed)
  2287                           ; jumptable            260     6 (fixed)
  2288                           ;	Chosen strategy is simple_byte
  2289     005A  0832               	movf	(??_sprintf+1)^(0+128),w
  2290     005B  3A00               	xorlw	0	; case 0
  2291     005C  1903               	skipnz
  2292     005D  285F               	goto	l2701
  2293     005E  28FD               	goto	l2441
  2294     005F                     l2701:
  2295                           
  2296                           ; Switch size 1, requested type "simple"
  2297                           ; Number of cases is 3, Range of values is 0 to 105
  2298                           ; switch strategies available:
  2299                           ; Name         Instructions Cycles
  2300                           ; simple_byte           10     6 (average)
  2301                           ; jumptable            260     6 (fixed)
  2302                           ;	Chosen strategy is simple_byte
  2303     005F  0831               	movf	??_sprintf^(0+128),w
  2304     0060  3A00               	xorlw	0	; case 0
  2305     0061  1903               	skipnz
  2306     0062  290D               	goto	l2443
  2307     0063  3A64               	xorlw	100	; case 100
  2308     0064  1903               	skipnz
  2309     0065  286A               	goto	l2403
  2310     0066  3A0D               	xorlw	13	; case 105
  2311     0067  1903               	skipnz
  2312     0068  286A               	goto	l2403
  2313     0069  28FD               	goto	l2441
  2314     006A                     l2403:
  2315                           
  2316                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2317     006A  0834               	movf	sprintf@ap^(0+128),w
  2318     006B  0084               	movwf	4
  2319     006C  1383               	bcf	3,7	;select IRP bank0
  2320     006D  0800               	movf	0,w
  2321     006E  00B7               	movwf	sprintf@val^(0+128)
  2322     006F  0A84               	incf	4,f
  2323     0070  0800               	movf	0,w
  2324     0071  00B8               	movwf	(sprintf@val+1)^(0+128)
  2325     0072                     l2405:
  2326     0072  3002               	movlw	2
  2327     0073  00B1               	movwf	??_sprintf^(0+128)
  2328     0074  0831               	movf	??_sprintf^(0+128),w
  2329     0075  07B4               	addwf	sprintf@ap^(0+128),f
  2330     0076                     l2407:
  2331                           
  2332                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2333     0076  1FB8               	btfss	(sprintf@val+1)^(0+128),7
  2334     0077  2879               	goto	u2021
  2335     0078  287A               	goto	u2020
  2336     0079                     u2021:
  2337     0079  2883               	goto	l2413
  2338     007A                     u2020:
  2339     007A                     l2409:
  2340                           
  2341                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2342     007A  3003               	movlw	3
  2343     007B  00B1               	movwf	??_sprintf^(0+128)
  2344     007C  0831               	movf	??_sprintf^(0+128),w
  2345     007D  04B5               	iorwf	sprintf@flag^(0+128),f
  2346     007E                     l2411:
  2347                           
  2348                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2349     007E  09B7               	comf	sprintf@val^(0+128),f
  2350     007F  09B8               	comf	(sprintf@val+1)^(0+128),f
  2351     0080  0AB7               	incf	sprintf@val^(0+128),f
  2352     0081  1903               	skipnz
  2353     0082  0AB8               	incf	(sprintf@val+1)^(0+128),f
  2354     0083                     l2413:
  2355                           
  2356                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2357     0083  01BA               	clrf	sprintf@c^(0+128)
  2358     0084  0ABA               	incf	sprintf@c^(0+128),f
  2359     0085                     l2419:
  2360                           
  2361                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2362     0085  083A               	movf	sprintf@c^(0+128),w
  2363     0086  00B1               	movwf	??_sprintf^(0+128)
  2364     0087  0731               	addwf	??_sprintf^(0+128),w
  2365     0088  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2366     0089  0084               	movwf	4
  2367     008A  120A  118A  23A7  120A  118A  	fcall	stringdir
  2368     008F  00B2               	movwf	(??_sprintf+1)^(0+128)
  2369     0090  120A  118A  23A7  120A  118A  	fcall	stringdir
  2370     0095  00B3               	movwf	((??_sprintf+1)^(0+128)+1)
  2371     0096  0833               	movf	(??_sprintf+2)^(0+128),w
  2372     0097  0238               	subwf	(sprintf@val+1)^(0+128),w
  2373     0098  1D03               	skipz
  2374     0099  289C               	goto	u2035
  2375     009A  0832               	movf	(??_sprintf+1)^(0+128),w
  2376     009B  0237               	subwf	sprintf@val^(0+128),w
  2377     009C                     u2035:
  2378     009C  1803               	skipnc
  2379     009D  289F               	goto	u2031
  2380     009E  28A0               	goto	u2030
  2381     009F                     u2031:
  2382     009F  28A1               	goto	l2423
  2383     00A0                     u2030:
  2384     00A0  28AB               	goto	l2425
  2385     00A1                     l2423:
  2386     00A1  3001               	movlw	1
  2387     00A2  00B1               	movwf	??_sprintf^(0+128)
  2388     00A3  0831               	movf	??_sprintf^(0+128),w
  2389     00A4  07BA               	addwf	sprintf@c^(0+128),f
  2390     00A5  3005               	movlw	5
  2391     00A6  063A               	xorwf	sprintf@c^(0+128),w
  2392     00A7  1D03               	btfss	3,2
  2393     00A8  28AA               	goto	u2041
  2394     00A9  28AB               	goto	u2040
  2395     00AA                     u2041:
  2396     00AA  2885               	goto	l2419
  2397     00AB                     u2040:
  2398     00AB                     l2425:
  2399                           
  2400                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2401     00AB  0835               	movf	sprintf@flag^(0+128),w
  2402     00AC  3903               	andlw	3
  2403     00AD  1903               	btfsc	3,2
  2404     00AE  28B0               	goto	u2051
  2405     00AF  28B1               	goto	u2050
  2406     00B0                     u2051:
  2407     00B0  28BA               	goto	l2431
  2408     00B1                     u2050:
  2409     00B1                     l2427:
  2410                           
  2411                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2412     00B1  0839               	movf	sprintf@sp^(0+128),w
  2413     00B2  0084               	movwf	4
  2414     00B3  302D               	movlw	45
  2415     00B4  1383               	bcf	3,7	;select IRP bank0
  2416     00B5  0080               	movwf	0
  2417     00B6                     l2429:
  2418     00B6  3001               	movlw	1
  2419     00B7  00B1               	movwf	??_sprintf^(0+128)
  2420     00B8  0831               	movf	??_sprintf^(0+128),w
  2421     00B9  07B9               	addwf	sprintf@sp^(0+128),f
  2422     00BA                     l2431:
  2423                           
  2424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2425     00BA  083A               	movf	sprintf@c^(0+128),w
  2426     00BB  00B6               	movwf	sprintf@prec^(0+128)
  2427                           
  2428                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2429     00BC  28F4               	goto	l2439
  2430     00BD                     l2433:
  2431                           
  2432                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2433     00BD  300A               	movlw	10
  2434     00BE  00A8               	movwf	___lwmod@divisor^(0+128)
  2435     00BF  3000               	movlw	0
  2436     00C0  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  2437     00C1  0836               	movf	sprintf@prec^(0+128),w
  2438     00C2  00B1               	movwf	??_sprintf^(0+128)
  2439     00C3  0731               	addwf	??_sprintf^(0+128),w
  2440     00C4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2441     00C5  0084               	movwf	4
  2442     00C6  120A  118A  23A7  120A  118A  	fcall	stringdir
  2443     00CB  00A0               	movwf	___lwdiv@divisor^(0+128)
  2444     00CC  120A  118A  23A7  120A  118A  	fcall	stringdir
  2445     00D1  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  2446     00D2  0838               	movf	(sprintf@val+1)^(0+128),w
  2447     00D3  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  2448     00D4  0837               	movf	sprintf@val^(0+128),w
  2449     00D5  00A2               	movwf	___lwdiv@dividend^(0+128)
  2450     00D6  120A  118A  24DF  120A  118A  	fcall	___lwdiv
  2451     00DB  1683               	bsf	3,5	;RP0=1, select bank1
  2452     00DC  1303               	bcf	3,6	;RP1=0, select bank1
  2453     00DD  0821               	movf	(?___lwdiv+1)^(0+128),w
  2454     00DE  00AB               	movwf	(___lwmod@dividend+1)^(0+128)
  2455     00DF  0820               	movf	?___lwdiv^(0+128),w
  2456     00E0  00AA               	movwf	___lwmod@dividend^(0+128)
  2457     00E1  120A  118A  26F0  120A  118A  	fcall	___lwmod
  2458     00E6  1683               	bsf	3,5	;RP0=1, select bank1
  2459     00E7  1303               	bcf	3,6	;RP1=0, select bank1
  2460     00E8  0828               	movf	?___lwmod^(0+128),w
  2461     00E9  3E30               	addlw	48
  2462     00EA  00BA               	movwf	sprintf@c^(0+128)
  2463     00EB                     l2435:
  2464                           
  2465                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2466     00EB  0839               	movf	sprintf@sp^(0+128),w
  2467     00EC  0084               	movwf	4
  2468     00ED  083A               	movf	sprintf@c^(0+128),w
  2469     00EE  1383               	bcf	3,7	;select IRP bank0
  2470     00EF  0080               	movwf	0
  2471     00F0                     l2437:
  2472     00F0  3001               	movlw	1
  2473     00F1  00B1               	movwf	??_sprintf^(0+128)
  2474     00F2  0831               	movf	??_sprintf^(0+128),w
  2475     00F3  07B9               	addwf	sprintf@sp^(0+128),f
  2476     00F4                     l2439:
  2477                           
  2478                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2479     00F4  30FF               	movlw	255
  2480     00F5  00B1               	movwf	??_sprintf^(0+128)
  2481     00F6  0831               	movf	??_sprintf^(0+128),w
  2482     00F7  07B6               	addwf	sprintf@prec^(0+128),f
  2483     00F8  0A36               	incf	sprintf@prec^(0+128),w
  2484     00F9  1D03               	btfss	3,2
  2485     00FA  28FC               	goto	u2061
  2486     00FB  28FD               	goto	u2060
  2487     00FC                     u2061:
  2488     00FC  28BD               	goto	l2433
  2489     00FD                     u2060:
  2490     00FD                     l2441:
  2491                           
  2492                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2493     00FD  3001               	movlw	1
  2494     00FE  07AE               	addwf	sprintf@f^(0+128),f
  2495     00FF  30FF               	movlw	-1
  2496     0100  072E               	addwf	sprintf@f^(0+128),w
  2497     0101  0084               	movwf	4
  2498     0102  120A  118A  23A7  120A  118A  	fcall	stringdir
  2499     0107  00BA               	movwf	sprintf@c^(0+128)
  2500     0108  083A               	movf	sprintf@c^(0+128),w
  2501     0109  1D03               	btfss	3,2
  2502     010A  290C               	goto	u2071
  2503     010B  290D               	goto	u2070
  2504     010C                     u2071:
  2505     010C  283C               	goto	l2391
  2506     010D                     u2070:
  2507     010D                     l2443:
  2508                           
  2509                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2510     010D  0839               	movf	sprintf@sp^(0+128),w
  2511     010E  0084               	movwf	4
  2512     010F  1383               	bcf	3,7	;select IRP bank0
  2513     0110  0180               	clrf	0
  2514     0111                     l411:
  2515     0111  0008               	return
  2516     0112                     __end_of_sprintf:
  2517                           
  2518                           	psect	text7
  2519     06F0                     __ptext7:	
  2520 ;; *************** function ___lwmod *****************
  2521 ;; Defined at:
  2522 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  divisor         2    8[BANK1 ] unsigned int 
  2525 ;;  dividend        2   10[BANK1 ] unsigned int 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  counter         1   13[BANK1 ] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2    8[BANK1 ] unsigned int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2537 ;;      Params:         0       0       4       0       0
  2538 ;;      Locals:         0       0       1       0       0
  2539 ;;      Temps:          0       0       1       0       0
  2540 ;;      Totals:         0       0       6       0       0
  2541 ;;Total ram usage:        6 bytes
  2542 ;; Hardware stack levels used: 1
  2543 ;; Hardware stack levels required when called: 4
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_sprintf
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551     06F0                     ___lwmod:	
  2552                           ;psect for function ___lwmod
  2553                           
  2554     06F0                     l2335:	
  2555                           ;incstack = 0
  2556                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2557                           
  2558     06F0  1683               	bsf	3,5	;RP0=1, select bank1
  2559     06F1  1303               	bcf	3,6	;RP1=0, select bank1
  2560     06F2  0828               	movf	___lwmod@divisor^(0+128),w
  2561     06F3  0429               	iorwf	(___lwmod@divisor+1)^(0+128),w
  2562     06F4  1903               	btfsc	3,2
  2563     06F5  2EF7               	goto	u1941
  2564     06F6  2EF8               	goto	u1940
  2565     06F7                     u1941:
  2566     06F7  2F27               	goto	l2353
  2567     06F8                     u1940:
  2568     06F8                     l2337:
  2569     06F8  01AD               	clrf	___lwmod@counter^(0+128)
  2570     06F9  0AAD               	incf	___lwmod@counter^(0+128),f
  2571     06FA  2F06               	goto	l2343
  2572     06FB                     l2339:
  2573     06FB  3001               	movlw	1
  2574     06FC                     u1955:
  2575     06FC  1003               	clrc
  2576     06FD  0DA8               	rlf	___lwmod@divisor^(0+128),f
  2577     06FE  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  2578     06FF  3EFF               	addlw	-1
  2579     0700  1D03               	skipz
  2580     0701  2EFC               	goto	u1955
  2581     0702                     l2341:
  2582     0702  3001               	movlw	1
  2583     0703  00AC               	movwf	??___lwmod^(0+128)
  2584     0704  082C               	movf	??___lwmod^(0+128),w
  2585     0705  07AD               	addwf	___lwmod@counter^(0+128),f
  2586     0706                     l2343:
  2587     0706  1FA9               	btfss	(___lwmod@divisor+1)^(0+128),7
  2588     0707  2F09               	goto	u1961
  2589     0708  2F0A               	goto	u1960
  2590     0709                     u1961:
  2591     0709  2EFB               	goto	l2339
  2592     070A                     u1960:
  2593     070A                     l2345:
  2594     070A  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  2595     070B  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  2596     070C  1D03               	skipz
  2597     070D  2F10               	goto	u1975
  2598     070E  0828               	movf	___lwmod@divisor^(0+128),w
  2599     070F  022A               	subwf	___lwmod@dividend^(0+128),w
  2600     0710                     u1975:
  2601     0710  1C03               	skipc
  2602     0711  2F13               	goto	u1971
  2603     0712  2F14               	goto	u1970
  2604     0713                     u1971:
  2605     0713  2F1A               	goto	l2349
  2606     0714                     u1970:
  2607     0714                     l2347:
  2608     0714  0828               	movf	___lwmod@divisor^(0+128),w
  2609     0715  02AA               	subwf	___lwmod@dividend^(0+128),f
  2610     0716  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  2611     0717  1C03               	skipc
  2612     0718  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  2613     0719  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  2614     071A                     l2349:
  2615     071A  3001               	movlw	1
  2616     071B                     u1985:
  2617     071B  1003               	clrc
  2618     071C  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  2619     071D  0CA8               	rrf	___lwmod@divisor^(0+128),f
  2620     071E  3EFF               	addlw	-1
  2621     071F  1D03               	skipz
  2622     0720  2F1B               	goto	u1985
  2623     0721                     l2351:
  2624     0721  3001               	movlw	1
  2625     0722  02AD               	subwf	___lwmod@counter^(0+128),f
  2626     0723  1D03               	btfss	3,2
  2627     0724  2F26               	goto	u1991
  2628     0725  2F27               	goto	u1990
  2629     0726                     u1991:
  2630     0726  2F0A               	goto	l2345
  2631     0727                     u1990:
  2632     0727                     l2353:
  2633     0727  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  2634     0728  00A9               	movwf	(?___lwmod+1)^(0+128)
  2635     0729  082A               	movf	___lwmod@dividend^(0+128),w
  2636     072A  00A8               	movwf	?___lwmod^(0+128)
  2637     072B                     l697:
  2638     072B  0008               	return
  2639     072C                     __end_of___lwmod:
  2640                           
  2641                           	psect	text8
  2642     04DF                     __ptext8:	
  2643 ;; *************** function ___lwdiv *****************
  2644 ;; Defined at:
  2645 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  divisor         2    0[BANK1 ] unsigned int 
  2648 ;;  dividend        2    2[BANK1 ] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  quotient        2    6[BANK1 ] unsigned int 
  2651 ;;  counter         1    5[BANK1 ] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  2    0[BANK1 ] unsigned int 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2661 ;;      Params:         0       0       4       0       0
  2662 ;;      Locals:         0       0       3       0       0
  2663 ;;      Temps:          0       0       1       0       0
  2664 ;;      Totals:         0       0       8       0       0
  2665 ;;Total ram usage:        8 bytes
  2666 ;; Hardware stack levels used: 1
  2667 ;; Hardware stack levels required when called: 4
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_sprintf
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675     04DF                     ___lwdiv:	
  2676                           ;psect for function ___lwdiv
  2677                           
  2678     04DF                     l2309:	
  2679                           ;incstack = 0
  2680                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2681                           
  2682     04DF  1683               	bsf	3,5	;RP0=1, select bank1
  2683     04E0  1303               	bcf	3,6	;RP1=0, select bank1
  2684     04E1  01A6               	clrf	___lwdiv@quotient^(0+128)
  2685     04E2  01A7               	clrf	(___lwdiv@quotient+1)^(0+128)
  2686     04E3                     l2311:
  2687     04E3  0820               	movf	___lwdiv@divisor^(0+128),w
  2688     04E4  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  2689     04E5  1903               	btfsc	3,2
  2690     04E6  2CE8               	goto	u1871
  2691     04E7  2CE9               	goto	u1870
  2692     04E8                     u1871:
  2693     04E8  2D20               	goto	l2331
  2694     04E9                     u1870:
  2695     04E9                     l2313:
  2696     04E9  01A5               	clrf	___lwdiv@counter^(0+128)
  2697     04EA  0AA5               	incf	___lwdiv@counter^(0+128),f
  2698     04EB  2CF7               	goto	l2319
  2699     04EC                     l2315:
  2700     04EC  3001               	movlw	1
  2701     04ED                     u1885:
  2702     04ED  1003               	clrc
  2703     04EE  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  2704     04EF  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  2705     04F0  3EFF               	addlw	-1
  2706     04F1  1D03               	skipz
  2707     04F2  2CED               	goto	u1885
  2708     04F3                     l2317:
  2709     04F3  3001               	movlw	1
  2710     04F4  00A4               	movwf	??___lwdiv^(0+128)
  2711     04F5  0824               	movf	??___lwdiv^(0+128),w
  2712     04F6  07A5               	addwf	___lwdiv@counter^(0+128),f
  2713     04F7                     l2319:
  2714     04F7  1FA1               	btfss	(___lwdiv@divisor+1)^(0+128),7
  2715     04F8  2CFA               	goto	u1891
  2716     04F9  2CFB               	goto	u1890
  2717     04FA                     u1891:
  2718     04FA  2CEC               	goto	l2315
  2719     04FB                     u1890:
  2720     04FB                     l2321:
  2721     04FB  3001               	movlw	1
  2722     04FC                     u1905:
  2723     04FC  1003               	clrc
  2724     04FD  0DA6               	rlf	___lwdiv@quotient^(0+128),f
  2725     04FE  0DA7               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2726     04FF  3EFF               	addlw	-1
  2727     0500  1D03               	skipz
  2728     0501  2CFC               	goto	u1905
  2729     0502  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2730     0503  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  2731     0504  1D03               	skipz
  2732     0505  2D08               	goto	u1915
  2733     0506  0820               	movf	___lwdiv@divisor^(0+128),w
  2734     0507  0222               	subwf	___lwdiv@dividend^(0+128),w
  2735     0508                     u1915:
  2736     0508  1C03               	skipc
  2737     0509  2D0B               	goto	u1911
  2738     050A  2D0C               	goto	u1910
  2739     050B                     u1911:
  2740     050B  2D13               	goto	l2327
  2741     050C                     u1910:
  2742     050C                     l2323:
  2743     050C  0820               	movf	___lwdiv@divisor^(0+128),w
  2744     050D  02A2               	subwf	___lwdiv@dividend^(0+128),f
  2745     050E  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2746     050F  1C03               	skipc
  2747     0510  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  2748     0511  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  2749     0512                     l2325:
  2750     0512  1426               	bsf	___lwdiv@quotient^(0+128),0
  2751     0513                     l2327:
  2752     0513  3001               	movlw	1
  2753     0514                     u1925:
  2754     0514  1003               	clrc
  2755     0515  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  2756     0516  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  2757     0517  3EFF               	addlw	-1
  2758     0518  1D03               	skipz
  2759     0519  2D14               	goto	u1925
  2760     051A                     l2329:
  2761     051A  3001               	movlw	1
  2762     051B  02A5               	subwf	___lwdiv@counter^(0+128),f
  2763     051C  1D03               	btfss	3,2
  2764     051D  2D1F               	goto	u1931
  2765     051E  2D20               	goto	u1930
  2766     051F                     u1931:
  2767     051F  2CFB               	goto	l2321
  2768     0520                     u1930:
  2769     0520                     l2331:
  2770     0520  0827               	movf	(___lwdiv@quotient+1)^(0+128),w
  2771     0521  00A1               	movwf	(?___lwdiv+1)^(0+128)
  2772     0522  0826               	movf	___lwdiv@quotient^(0+128),w
  2773     0523  00A0               	movwf	?___lwdiv^(0+128)
  2774     0524                     l687:
  2775     0524  0008               	return
  2776     0525                     __end_of___lwdiv:
  2777                           
  2778                           	psect	text9
  2779     044B                     __ptext9:	
  2780 ;; *************** function _map *****************
  2781 ;; Defined at:
  2782 ;;		line 62 in file "ADC.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  val             2   28[BANK1 ] int 
  2785 ;;  minx            2   30[BANK1 ] int 
  2786 ;;  maxx            2   32[BANK1 ] int 
  2787 ;;  miny            2   34[BANK1 ] int 
  2788 ;;  maxy            2   36[BANK1 ] int 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  vo              2   38[BANK1 ] int 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  2   28[BANK1 ] int 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, pclath, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2800 ;;      Params:         0       0      10       0       0
  2801 ;;      Locals:         0       0       2       0       0
  2802 ;;      Temps:          0       0       0       0       0
  2803 ;;      Totals:         0       0      12       0       0
  2804 ;;Total ram usage:       12 bytes
  2805 ;; Hardware stack levels used: 1
  2806 ;; Hardware stack levels required when called: 5
  2807 ;; This function calls:
  2808 ;;		___aldiv
  2809 ;;		___lmul
  2810 ;; This function is called by:
  2811 ;;		_POT
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815     044B                     _map:	
  2816                           ;psect for function _map
  2817                           
  2818     044B                     l2383:	
  2819                           ;incstack = 0
  2820                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  2821                           
  2822                           
  2823                           ;ADC.c: 63:     int vo;;ADC.c: 64:     vo = (long)(val-minx)*(maxy-miny)/(maxx-minx)+ mi
      +                          ny;
  2824     044B  1683               	bsf	3,5	;RP0=1, select bank1
  2825     044C  1303               	bcf	3,6	;RP1=0, select bank1
  2826     044D  083E               	movf	map@minx^(0+128),w
  2827     044E  0240               	subwf	map@maxx^(0+128),w
  2828     044F  00AD               	movwf	___aldiv@divisor^(0+128)
  2829     0450  083F               	movf	(map@minx+1)^(0+128),w
  2830     0451  1C03               	skipc
  2831     0452  0A3F               	incf	(map@minx+1)^(0+128),w
  2832     0453  0241               	subwf	(map@maxx+1)^(0+128),w
  2833     0454  00AE               	movwf	(___aldiv@divisor+1)^(0+128)
  2834     0455  01AF               	clrf	(___aldiv@divisor^(0+128)+2)
  2835     0456  1BAE               	btfsc	(___aldiv@divisor^(0+128)+1),7
  2836     0457  03AF               	decf	(___aldiv@divisor+2)^(0+128),f
  2837     0458  082F               	movf	(___aldiv@divisor^(0+128)+2),w
  2838     0459  00B0               	movwf	(___aldiv@divisor+3)^(0+128)
  2839     045A  083E               	movf	map@minx^(0+128),w
  2840     045B  023C               	subwf	map@val^(0+128),w
  2841     045C  00A0               	movwf	___lmul@multiplier^(0+128)
  2842     045D  083F               	movf	(map@minx+1)^(0+128),w
  2843     045E  1C03               	skipc
  2844     045F  0A3F               	incf	(map@minx+1)^(0+128),w
  2845     0460  023D               	subwf	(map@val+1)^(0+128),w
  2846     0461  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  2847     0462  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
  2848     0463  1BA1               	btfsc	(___lmul@multiplier^(0+128)+1),7
  2849     0464  03A2               	decf	(___lmul@multiplier+2)^(0+128),f
  2850     0465  0822               	movf	(___lmul@multiplier^(0+128)+2),w
  2851     0466  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  2852     0467  0842               	movf	map@miny^(0+128),w
  2853     0468  0244               	subwf	map@maxy^(0+128),w
  2854     0469  00A4               	movwf	___lmul@multiplicand^(0+128)
  2855     046A  0843               	movf	(map@miny+1)^(0+128),w
  2856     046B  1C03               	skipc
  2857     046C  0A43               	incf	(map@miny+1)^(0+128),w
  2858     046D  0245               	subwf	(map@maxy+1)^(0+128),w
  2859     046E  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  2860     046F  01A6               	clrf	(___lmul@multiplicand^(0+128)+2)
  2861     0470  1BA5               	btfsc	(___lmul@multiplicand^(0+128)+1),7
  2862     0471  03A6               	decf	(___lmul@multiplicand+2)^(0+128),f
  2863     0472  0826               	movf	(___lmul@multiplicand^(0+128)+2),w
  2864     0473  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  2865     0474  120A  118A  2497  120A  118A  	fcall	___lmul
  2866     0479  1683               	bsf	3,5	;RP0=1, select bank1
  2867     047A  1303               	bcf	3,6	;RP1=0, select bank1
  2868     047B  0823               	movf	(?___lmul+3)^(0+128),w
  2869     047C  00B4               	movwf	(___aldiv@dividend+3)^(0+128)
  2870     047D  0822               	movf	(?___lmul+2)^(0+128),w
  2871     047E  00B3               	movwf	(___aldiv@dividend+2)^(0+128)
  2872     047F  0821               	movf	(?___lmul+1)^(0+128),w
  2873     0480  00B2               	movwf	(___aldiv@dividend+1)^(0+128)
  2874     0481  0820               	movf	?___lmul^(0+128),w
  2875     0482  00B1               	movwf	___aldiv@dividend^(0+128)
  2876     0483  120A  118A  21EC  120A  118A  	fcall	___aldiv
  2877     0488  1683               	bsf	3,5	;RP0=1, select bank1
  2878     0489  1303               	bcf	3,6	;RP1=0, select bank1
  2879     048A  0842               	movf	map@miny^(0+128),w
  2880     048B  072D               	addwf	?___aldiv^(0+128),w
  2881     048C  00C6               	movwf	map@vo^(0+128)
  2882     048D  0843               	movf	(map@miny+1)^(0+128),w
  2883     048E  1803               	skipnc
  2884     048F  0A43               	incf	(map@miny+1)^(0+128),w
  2885     0490  072E               	addwf	(?___aldiv+1)^(0+128),w
  2886     0491  00C7               	movwf	(map@vo+1)^(0+128)
  2887     0492                     l2385:
  2888                           
  2889                           ;ADC.c: 65:     return vo;
  2890     0492  0847               	movf	(map@vo+1)^(0+128),w
  2891     0493  00BD               	movwf	(?_map+1)^(0+128)
  2892     0494  0846               	movf	map@vo^(0+128),w
  2893     0495  00BC               	movwf	?_map^(0+128)
  2894     0496                     l31:
  2895     0496  0008               	return
  2896     0497                     __end_of_map:
  2897                           
  2898                           	psect	text10
  2899     0497                     __ptext10:	
  2900 ;; *************** function ___lmul *****************
  2901 ;; Defined at:
  2902 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  multiplier      4    0[BANK1 ] unsigned long 
  2905 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  product         4    9[BANK1 ] unsigned long 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  4    0[BANK1 ] unsigned long 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2917 ;;      Params:         0       0       8       0       0
  2918 ;;      Locals:         0       0       4       0       0
  2919 ;;      Temps:          0       0       1       0       0
  2920 ;;      Totals:         0       0      13       0       0
  2921 ;;Total ram usage:       13 bytes
  2922 ;; Hardware stack levels used: 1
  2923 ;; Hardware stack levels required when called: 4
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_map
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931     0497                     ___lmul:	
  2932                           ;psect for function ___lmul
  2933                           
  2934     0497                     l2255:	
  2935                           ;incstack = 0
  2936                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2937                           
  2938     0497  3000               	movlw	0
  2939     0498  1683               	bsf	3,5	;RP0=1, select bank1
  2940     0499  1303               	bcf	3,6	;RP1=0, select bank1
  2941     049A  00AC               	movwf	(___lmul@product+3)^(0+128)
  2942     049B  3000               	movlw	0
  2943     049C  00AB               	movwf	(___lmul@product+2)^(0+128)
  2944     049D  3000               	movlw	0
  2945     049E  00AA               	movwf	(___lmul@product+1)^(0+128)
  2946     049F  3000               	movlw	0
  2947     04A0  00A9               	movwf	___lmul@product^(0+128)
  2948     04A1                     l2257:
  2949     04A1  1C20               	btfss	___lmul@multiplier^(0+128),0
  2950     04A2  2CA4               	goto	u1721
  2951     04A3  2CA5               	goto	u1720
  2952     04A4                     u1721:
  2953     04A4  2CBC               	goto	l2261
  2954     04A5                     u1720:
  2955     04A5                     l2259:
  2956     04A5  0824               	movf	___lmul@multiplicand^(0+128),w
  2957     04A6  07A9               	addwf	___lmul@product^(0+128),f
  2958     04A7  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  2959     04A8  1103               	clrz
  2960     04A9  1803               	skipnc
  2961     04AA  3E01               	addlw	1
  2962     04AB  1903               	skipnz
  2963     04AC  2CAE               	goto	u1731
  2964     04AD  07AA               	addwf	(___lmul@product+1)^(0+128),f
  2965     04AE                     u1731:
  2966     04AE  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  2967     04AF  1103               	clrz
  2968     04B0  1803               	skipnc
  2969     04B1  3E01               	addlw	1
  2970     04B2  1903               	skipnz
  2971     04B3  2CB5               	goto	u1732
  2972     04B4  07AB               	addwf	(___lmul@product+2)^(0+128),f
  2973     04B5                     u1732:
  2974     04B5  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  2975     04B6  1103               	clrz
  2976     04B7  1803               	skipnc
  2977     04B8  3E01               	addlw	1
  2978     04B9  1903               	skipnz
  2979     04BA  2CBC               	goto	u1733
  2980     04BB  07AC               	addwf	(___lmul@product+3)^(0+128),f
  2981     04BC                     u1733:
  2982     04BC                     l2261:
  2983     04BC  3001               	movlw	1
  2984     04BD  00A8               	movwf	??___lmul^(0+128)
  2985     04BE                     u1745:
  2986     04BE  1003               	clrc
  2987     04BF  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  2988     04C0  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  2989     04C1  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  2990     04C2  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  2991     04C3  0BA8               	decfsz	??___lmul^(0+128),f
  2992     04C4  2CBE               	goto	u1745
  2993     04C5                     l2263:
  2994     04C5  3001               	movlw	1
  2995     04C6                     u1755:
  2996     04C6  1003               	clrc
  2997     04C7  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  2998     04C8  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  2999     04C9  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  3000     04CA  0CA0               	rrf	___lmul@multiplier^(0+128),f
  3001     04CB  3EFF               	addlw	-1
  3002     04CC  1D03               	skipz
  3003     04CD  2CC6               	goto	u1755
  3004     04CE  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  3005     04CF  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  3006     04D0  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  3007     04D1  0420               	iorwf	___lmul@multiplier^(0+128),w
  3008     04D2  1D03               	skipz
  3009     04D3  2CD5               	goto	u1761
  3010     04D4  2CD6               	goto	u1760
  3011     04D5                     u1761:
  3012     04D5  2CA1               	goto	l2257
  3013     04D6                     u1760:
  3014     04D6                     l2265:
  3015     04D6  082C               	movf	(___lmul@product+3)^(0+128),w
  3016     04D7  00A3               	movwf	(?___lmul+3)^(0+128)
  3017     04D8  082B               	movf	(___lmul@product+2)^(0+128),w
  3018     04D9  00A2               	movwf	(?___lmul+2)^(0+128)
  3019     04DA  082A               	movf	(___lmul@product+1)^(0+128),w
  3020     04DB  00A1               	movwf	(?___lmul+1)^(0+128)
  3021     04DC  0829               	movf	___lmul@product^(0+128),w
  3022     04DD  00A0               	movwf	?___lmul^(0+128)
  3023     04DE                     l429:
  3024     04DE  0008               	return
  3025     04DF                     __end_of___lmul:
  3026                           
  3027                           	psect	text11
  3028     01EC                     __ptext11:	
  3029 ;; *************** function ___aldiv *****************
  3030 ;; Defined at:
  3031 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  divisor         4   13[BANK1 ] long 
  3034 ;;  dividend        4   17[BANK1 ] long 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  quotient        4   24[BANK1 ] long 
  3037 ;;  sign            1   23[BANK1 ] unsigned char 
  3038 ;;  counter         1   22[BANK1 ] unsigned char 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  4   13[BANK1 ] long 
  3041 ;; Registers used:
  3042 ;;		wreg, status,2, status,0
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       8       0       0
  3049 ;;      Locals:         0       0       6       0       0
  3050 ;;      Temps:          0       0       1       0       0
  3051 ;;      Totals:         0       0      15       0       0
  3052 ;;Total ram usage:       15 bytes
  3053 ;; Hardware stack levels used: 1
  3054 ;; Hardware stack levels required when called: 4
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_map
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062     01EC                     ___aldiv:	
  3063                           ;psect for function ___aldiv
  3064                           
  3065     01EC                     l2269:	
  3066                           ;incstack = 0
  3067                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3068                           
  3069     01EC  1683               	bsf	3,5	;RP0=1, select bank1
  3070     01ED  1303               	bcf	3,6	;RP1=0, select bank1
  3071     01EE  01B7               	clrf	___aldiv@sign^(0+128)
  3072     01EF                     l2271:
  3073     01EF  1FB0               	btfss	(___aldiv@divisor+3)^(0+128),7
  3074     01F0  29F2               	goto	u1771
  3075     01F1  29F3               	goto	u1770
  3076     01F2                     u1771:
  3077     01F2  2A00               	goto	l480
  3078     01F3                     u1770:
  3079     01F3                     l2273:
  3080     01F3  09AD               	comf	___aldiv@divisor^(0+128),f
  3081     01F4  09AE               	comf	(___aldiv@divisor+1)^(0+128),f
  3082     01F5  09AF               	comf	(___aldiv@divisor+2)^(0+128),f
  3083     01F6  09B0               	comf	(___aldiv@divisor+3)^(0+128),f
  3084     01F7  0AAD               	incf	___aldiv@divisor^(0+128),f
  3085     01F8  1903               	skipnz
  3086     01F9  0AAE               	incf	(___aldiv@divisor+1)^(0+128),f
  3087     01FA  1903               	skipnz
  3088     01FB  0AAF               	incf	(___aldiv@divisor+2)^(0+128),f
  3089     01FC  1903               	skipnz
  3090     01FD  0AB0               	incf	(___aldiv@divisor+3)^(0+128),f
  3091     01FE  01B7               	clrf	___aldiv@sign^(0+128)
  3092     01FF  0AB7               	incf	___aldiv@sign^(0+128),f
  3093     0200                     l480:
  3094     0200  1FB4               	btfss	(___aldiv@dividend+3)^(0+128),7
  3095     0201  2A03               	goto	u1781
  3096     0202  2A04               	goto	u1780
  3097     0203                     u1781:
  3098     0203  2A13               	goto	l2279
  3099     0204                     u1780:
  3100     0204                     l2275:
  3101     0204  09B1               	comf	___aldiv@dividend^(0+128),f
  3102     0205  09B2               	comf	(___aldiv@dividend+1)^(0+128),f
  3103     0206  09B3               	comf	(___aldiv@dividend+2)^(0+128),f
  3104     0207  09B4               	comf	(___aldiv@dividend+3)^(0+128),f
  3105     0208  0AB1               	incf	___aldiv@dividend^(0+128),f
  3106     0209  1903               	skipnz
  3107     020A  0AB2               	incf	(___aldiv@dividend+1)^(0+128),f
  3108     020B  1903               	skipnz
  3109     020C  0AB3               	incf	(___aldiv@dividend+2)^(0+128),f
  3110     020D  1903               	skipnz
  3111     020E  0AB4               	incf	(___aldiv@dividend+3)^(0+128),f
  3112     020F                     l2277:
  3113     020F  3001               	movlw	1
  3114     0210  00B5               	movwf	??___aldiv^(0+128)
  3115     0211  0835               	movf	??___aldiv^(0+128),w
  3116     0212  06B7               	xorwf	___aldiv@sign^(0+128),f
  3117     0213                     l2279:
  3118     0213  3000               	movlw	0
  3119     0214  00BB               	movwf	(___aldiv@quotient+3)^(0+128)
  3120     0215  3000               	movlw	0
  3121     0216  00BA               	movwf	(___aldiv@quotient+2)^(0+128)
  3122     0217  3000               	movlw	0
  3123     0218  00B9               	movwf	(___aldiv@quotient+1)^(0+128)
  3124     0219  3000               	movlw	0
  3125     021A  00B8               	movwf	___aldiv@quotient^(0+128)
  3126     021B                     l2281:
  3127     021B  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3128     021C  042F               	iorwf	(___aldiv@divisor+2)^(0+128),w
  3129     021D  042E               	iorwf	(___aldiv@divisor+1)^(0+128),w
  3130     021E  042D               	iorwf	___aldiv@divisor^(0+128),w
  3131     021F  1903               	skipnz
  3132     0220  2A22               	goto	u1791
  3133     0221  2A23               	goto	u1790
  3134     0222                     u1791:
  3135     0222  2A70               	goto	l2301
  3136     0223                     u1790:
  3137     0223                     l2283:
  3138     0223  01B6               	clrf	___aldiv@counter^(0+128)
  3139     0224  0AB6               	incf	___aldiv@counter^(0+128),f
  3140     0225  2A33               	goto	l2287
  3141     0226                     l2285:
  3142     0226  3001               	movlw	1
  3143     0227  00B5               	movwf	??___aldiv^(0+128)
  3144     0228                     u1805:
  3145     0228  1003               	clrc
  3146     0229  0DAD               	rlf	___aldiv@divisor^(0+128),f
  3147     022A  0DAE               	rlf	(___aldiv@divisor+1)^(0+128),f
  3148     022B  0DAF               	rlf	(___aldiv@divisor+2)^(0+128),f
  3149     022C  0DB0               	rlf	(___aldiv@divisor+3)^(0+128),f
  3150     022D  0BB5               	decfsz	??___aldiv^(0+128),f
  3151     022E  2A28               	goto	u1805
  3152     022F  3001               	movlw	1
  3153     0230  00B5               	movwf	??___aldiv^(0+128)
  3154     0231  0835               	movf	??___aldiv^(0+128),w
  3155     0232  07B6               	addwf	___aldiv@counter^(0+128),f
  3156     0233                     l2287:
  3157     0233  1FB0               	btfss	(___aldiv@divisor+3)^(0+128),7
  3158     0234  2A36               	goto	u1811
  3159     0235  2A37               	goto	u1810
  3160     0236                     u1811:
  3161     0236  2A26               	goto	l2285
  3162     0237                     u1810:
  3163     0237                     l2289:
  3164     0237  3001               	movlw	1
  3165     0238  00B5               	movwf	??___aldiv^(0+128)
  3166     0239                     u1825:
  3167     0239  1003               	clrc
  3168     023A  0DB8               	rlf	___aldiv@quotient^(0+128),f
  3169     023B  0DB9               	rlf	(___aldiv@quotient+1)^(0+128),f
  3170     023C  0DBA               	rlf	(___aldiv@quotient+2)^(0+128),f
  3171     023D  0DBB               	rlf	(___aldiv@quotient+3)^(0+128),f
  3172     023E  0BB5               	decfsz	??___aldiv^(0+128),f
  3173     023F  2A39               	goto	u1825
  3174     0240                     l2291:
  3175     0240  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3176     0241  0234               	subwf	(___aldiv@dividend+3)^(0+128),w
  3177     0242  1D03               	skipz
  3178     0243  2A4E               	goto	u1835
  3179     0244  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  3180     0245  0233               	subwf	(___aldiv@dividend+2)^(0+128),w
  3181     0246  1D03               	skipz
  3182     0247  2A4E               	goto	u1835
  3183     0248  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  3184     0249  0232               	subwf	(___aldiv@dividend+1)^(0+128),w
  3185     024A  1D03               	skipz
  3186     024B  2A4E               	goto	u1835
  3187     024C  082D               	movf	___aldiv@divisor^(0+128),w
  3188     024D  0231               	subwf	___aldiv@dividend^(0+128),w
  3189     024E                     u1835:
  3190     024E  1C03               	skipc
  3191     024F  2A51               	goto	u1831
  3192     0250  2A52               	goto	u1830
  3193     0251                     u1831:
  3194     0251  2A61               	goto	l2297
  3195     0252                     u1830:
  3196     0252                     l2293:
  3197     0252  082D               	movf	___aldiv@divisor^(0+128),w
  3198     0253  02B1               	subwf	___aldiv@dividend^(0+128),f
  3199     0254  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  3200     0255  1C03               	skipc
  3201     0256  0F2E               	incfsz	(___aldiv@divisor+1)^(0+128),w
  3202     0257  02B2               	subwf	(___aldiv@dividend+1)^(0+128),f
  3203     0258  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  3204     0259  1C03               	skipc
  3205     025A  0F2F               	incfsz	(___aldiv@divisor+2)^(0+128),w
  3206     025B  02B3               	subwf	(___aldiv@dividend+2)^(0+128),f
  3207     025C  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3208     025D  1C03               	skipc
  3209     025E  0F30               	incfsz	(___aldiv@divisor+3)^(0+128),w
  3210     025F  02B4               	subwf	(___aldiv@dividend+3)^(0+128),f
  3211     0260                     l2295:
  3212     0260  1438               	bsf	___aldiv@quotient^(0+128),0
  3213     0261                     l2297:
  3214     0261  3001               	movlw	1
  3215     0262                     u1845:
  3216     0262  1003               	clrc
  3217     0263  0CB0               	rrf	(___aldiv@divisor+3)^(0+128),f
  3218     0264  0CAF               	rrf	(___aldiv@divisor+2)^(0+128),f
  3219     0265  0CAE               	rrf	(___aldiv@divisor+1)^(0+128),f
  3220     0266  0CAD               	rrf	___aldiv@divisor^(0+128),f
  3221     0267  3EFF               	addlw	-1
  3222     0268  1D03               	skipz
  3223     0269  2A62               	goto	u1845
  3224     026A                     l2299:
  3225     026A  3001               	movlw	1
  3226     026B  02B6               	subwf	___aldiv@counter^(0+128),f
  3227     026C  1D03               	btfss	3,2
  3228     026D  2A6F               	goto	u1851
  3229     026E  2A70               	goto	u1850
  3230     026F                     u1851:
  3231     026F  2A37               	goto	l2289
  3232     0270                     u1850:
  3233     0270                     l2301:
  3234     0270  0837               	movf	___aldiv@sign^(0+128),w
  3235     0271  1903               	btfsc	3,2
  3236     0272  2A74               	goto	u1861
  3237     0273  2A75               	goto	u1860
  3238     0274                     u1861:
  3239     0274  2A80               	goto	l2305
  3240     0275                     u1860:
  3241     0275                     l2303:
  3242     0275  09B8               	comf	___aldiv@quotient^(0+128),f
  3243     0276  09B9               	comf	(___aldiv@quotient+1)^(0+128),f
  3244     0277  09BA               	comf	(___aldiv@quotient+2)^(0+128),f
  3245     0278  09BB               	comf	(___aldiv@quotient+3)^(0+128),f
  3246     0279  0AB8               	incf	___aldiv@quotient^(0+128),f
  3247     027A  1903               	skipnz
  3248     027B  0AB9               	incf	(___aldiv@quotient+1)^(0+128),f
  3249     027C  1903               	skipnz
  3250     027D  0ABA               	incf	(___aldiv@quotient+2)^(0+128),f
  3251     027E  1903               	skipnz
  3252     027F  0ABB               	incf	(___aldiv@quotient+3)^(0+128),f
  3253     0280                     l2305:
  3254     0280  083B               	movf	(___aldiv@quotient+3)^(0+128),w
  3255     0281  00B0               	movwf	(?___aldiv+3)^(0+128)
  3256     0282  083A               	movf	(___aldiv@quotient+2)^(0+128),w
  3257     0283  00AF               	movwf	(?___aldiv+2)^(0+128)
  3258     0284  0839               	movf	(___aldiv@quotient+1)^(0+128),w
  3259     0285  00AE               	movwf	(?___aldiv+1)^(0+128)
  3260     0286  0838               	movf	___aldiv@quotient^(0+128),w
  3261     0287  00AD               	movwf	?___aldiv^(0+128)
  3262     0288                     l490:
  3263     0288  0008               	return
  3264     0289                     __end_of___aldiv:
  3265                           
  3266                           	psect	text12
  3267     079E                     __ptext12:	
  3268 ;; *************** function _Lcd_Write_String8 *****************
  3269 ;; Defined at:
  3270 ;;		line 75 in file "LCD8bits.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  a               2    4[BANK1 ] PTR unsigned char 
  3273 ;;		 -> RAM(512), STR_4(5), STR_3(5), CVPOT(15), 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  i               2    6[BANK1 ] int 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  1    wreg      void 
  3278 ;; Registers used:
  3279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3285 ;;      Params:         0       0       2       0       0
  3286 ;;      Locals:         0       0       2       0       0
  3287 ;;      Temps:          0       0       0       0       0
  3288 ;;      Totals:         0       0       4       0       0
  3289 ;;Total ram usage:        4 bytes
  3290 ;; Hardware stack levels used: 1
  3291 ;; Hardware stack levels required when called: 6
  3292 ;; This function calls:
  3293 ;;		_Lcd_Write_Char8
  3294 ;; This function is called by:
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299     079E                     _Lcd_Write_String8:	
  3300                           ;psect for function _Lcd_Write_String8
  3301                           
  3302     079E                     l2595:	
  3303                           ;incstack = 0
  3304                           ; Regs used in _Lcd_Write_String8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3305                           
  3306                           
  3307                           ;LCD8bits.c: 76:     int i;;LCD8bits.c: 77:     for (i = 0; a[i] != '\0'; i++)
  3308     079E  1683               	bsf	3,5	;RP0=1, select bank1
  3309     079F  1303               	bcf	3,6	;RP1=0, select bank1
  3310     07A0  01A6               	clrf	Lcd_Write_String8@i^(0+128)
  3311     07A1  01A7               	clrf	(Lcd_Write_String8@i+1)^(0+128)
  3312     07A2  2FC1               	goto	l2601
  3313     07A3                     l2597:
  3314                           
  3315                           ;LCD8bits.c: 78:         Lcd_Write_Char8(a[i]);
  3316     07A3  1683               	bsf	3,5	;RP0=1, select bank1
  3317     07A4  1303               	bcf	3,6	;RP1=0, select bank1
  3318     07A5  0826               	movf	Lcd_Write_String8@i^(0+128),w
  3319     07A6  0724               	addwf	Lcd_Write_String8@a^(0+128),w
  3320     07A7  0084               	movwf	4
  3321     07A8  0827               	movf	(Lcd_Write_String8@i+1)^(0+128),w
  3322     07A9  1803               	skipnc
  3323     07AA  0A27               	incf	(Lcd_Write_String8@i+1)^(0+128),w
  3324     07AB  0725               	addwf	(Lcd_Write_String8@a+1)^(0+128),w
  3325     07AC  1283               	bcf	3,5	;RP0=0, select bank0
  3326     07AD  1303               	bcf	3,6	;RP1=0, select bank0
  3327     07AE  00FF               	movwf	btemp+1
  3328     07AF  120A  118A  239D  120A  118A  	fcall	stringtab
  3329     07B4  120A  158A  2796  120A  118A  	fcall	_Lcd_Write_Char8
  3330     07B9                     l2599:
  3331     07B9  3001               	movlw	1
  3332     07BA  1683               	bsf	3,5	;RP0=1, select bank1
  3333     07BB  1303               	bcf	3,6	;RP1=0, select bank1
  3334     07BC  07A6               	addwf	Lcd_Write_String8@i^(0+128),f
  3335     07BD  1803               	skipnc
  3336     07BE  0AA7               	incf	(Lcd_Write_String8@i+1)^(0+128),f
  3337     07BF  3000               	movlw	0
  3338     07C0  07A7               	addwf	(Lcd_Write_String8@i+1)^(0+128),f
  3339     07C1                     l2601:
  3340     07C1  0826               	movf	Lcd_Write_String8@i^(0+128),w
  3341     07C2  0724               	addwf	Lcd_Write_String8@a^(0+128),w
  3342     07C3  0084               	movwf	4
  3343     07C4  0827               	movf	(Lcd_Write_String8@i+1)^(0+128),w
  3344     07C5  1803               	skipnc
  3345     07C6  0A27               	incf	(Lcd_Write_String8@i+1)^(0+128),w
  3346     07C7  0725               	addwf	(Lcd_Write_String8@a+1)^(0+128),w
  3347     07C8  1283               	bcf	3,5	;RP0=0, select bank0
  3348     07C9  1303               	bcf	3,6	;RP1=0, select bank0
  3349     07CA  00FF               	movwf	btemp+1
  3350     07CB  120A  118A  239D  120A  118A  	fcall	stringtab
  3351     07D0  3A00               	xorlw	0
  3352     07D1  1D03               	skipz
  3353     07D2  2FD4               	goto	u2181
  3354     07D3  2FD5               	goto	u2180
  3355     07D4                     u2181:
  3356     07D4  2FA3               	goto	l2597
  3357     07D5                     u2180:
  3358     07D5                     l229:
  3359     07D5  0008               	return
  3360     07D6                     __end_of_Lcd_Write_String8:
  3361                           
  3362                           	psect	text13
  3363     0F96                     __ptext13:	
  3364 ;; *************** function _Lcd_Write_Char8 *****************
  3365 ;; Defined at:
  3366 ;;		line 63 in file "LCD8bits.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  a               1    wreg     unsigned char 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;  a               1    3[BANK1 ] unsigned char 
  3371 ;;  y               1    2[BANK1 ] unsigned char 
  3372 ;;  temp            1    0        unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0, pclath, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3382 ;;      Params:         0       0       0       0       0
  3383 ;;      Locals:         0       0       2       0       0
  3384 ;;      Temps:          0       0       1       0       0
  3385 ;;      Totals:         0       0       3       0       0
  3386 ;;Total ram usage:        3 bytes
  3387 ;; Hardware stack levels used: 1
  3388 ;; Hardware stack levels required when called: 5
  3389 ;; This function calls:
  3390 ;;		_Lcd_Port8
  3391 ;; This function is called by:
  3392 ;;		_Lcd_Write_String8
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396     0F96                     _Lcd_Write_Char8:	
  3397                           ;psect for function _Lcd_Write_Char8
  3398                           
  3399                           
  3400                           ;incstack = 0
  3401                           ; Regs used in _Lcd_Write_Char8: [wreg+status,2+status,0+pclath+cstack]
  3402                           ;Lcd_Write_Char8@a stored from wreg
  3403     0F96  1683               	bsf	3,5	;RP0=1, select bank1
  3404     0F97  1303               	bcf	3,6	;RP1=0, select bank1
  3405     0F98  00A3               	movwf	Lcd_Write_Char8@a^(0+128)
  3406     0F99                     l2513:
  3407                           
  3408                           ;LCD8bits.c: 66:     y = a;
  3409     0F99  0823               	movf	Lcd_Write_Char8@a^(0+128),w
  3410     0F9A  00A2               	movwf	Lcd_Write_Char8@y^(0+128)
  3411     0F9B                     l2515:
  3412                           
  3413                           ;LCD8bits.c: 67:     PORTCbits.RC0 = 1;
  3414     0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  3415     0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  3416     0F9D  1407               	bsf	7,0	;volatile
  3417     0F9E                     l2517:
  3418                           
  3419                           ;LCD8bits.c: 68:     Lcd_Port8(y);
  3420     0F9E  1683               	bsf	3,5	;RP0=1, select bank1
  3421     0F9F  1303               	bcf	3,6	;RP1=0, select bank1
  3422     0FA0  0822               	movf	Lcd_Write_Char8@y^(0+128),w
  3423     0FA1  120A  158A  2764  120A  158A  	fcall	_Lcd_Port8
  3424     0FA6                     l2519:
  3425                           
  3426                           ;LCD8bits.c: 69:     PORTCbits.RC1 = 1;
  3427     0FA6  1283               	bcf	3,5	;RP0=0, select bank0
  3428     0FA7  1303               	bcf	3,6	;RP1=0, select bank0
  3429     0FA8  1487               	bsf	7,1	;volatile
  3430     0FA9                     l2521:
  3431                           
  3432                           ;LCD8bits.c: 70:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3433     0FA9  3019               	movlw	25
  3434     0FAA  1683               	bsf	3,5	;RP0=1, select bank1
  3435     0FAB  1303               	bcf	3,6	;RP1=0, select bank1
  3436     0FAC  00A1               	movwf	??_Lcd_Write_Char8^(0+128)
  3437     0FAD                     u2247:
  3438     0FAD  0BA1               	decfsz	??_Lcd_Write_Char8^(0+128),f
  3439     0FAE  2FAD               	goto	u2247
  3440     0FAF  2FB0               	nop2
  3441     0FB0                     l2523:
  3442                           
  3443                           ;LCD8bits.c: 71:     PORTCbits.RC1 = 0;
  3444     0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3445     0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  3446     0FB2  1087               	bcf	7,1	;volatile
  3447     0FB3                     l223:
  3448     0FB3  0008               	return
  3449     0FB4                     __end_of_Lcd_Write_Char8:
  3450                           
  3451                           	psect	text14
  3452     07D6                     __ptext14:	
  3453 ;; *************** function _Lcd_Set_Cursor8 *****************
  3454 ;; Defined at:
  3455 ;;		line 33 in file "LCD8bits.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  a               1    wreg     unsigned char 
  3458 ;;  b               1    4[BANK1 ] unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  a               1    5[BANK1 ] unsigned char 
  3461 ;;  temp            1    6[BANK1 ] unsigned char 
  3462 ;;  y               1    0        unsigned char 
  3463 ;;  z               1    0        unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, status,2, status,0, pclath, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3473 ;;      Params:         0       0       1       0       0
  3474 ;;      Locals:         0       0       2       0       0
  3475 ;;      Temps:          0       0       0       0       0
  3476 ;;      Totals:         0       0       3       0       0
  3477 ;;Total ram usage:        3 bytes
  3478 ;; Hardware stack levels used: 1
  3479 ;; Hardware stack levels required when called: 6
  3480 ;; This function calls:
  3481 ;;		_Lcd_Cmd8
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487     07D6                     _Lcd_Set_Cursor8:	
  3488                           ;psect for function _Lcd_Set_Cursor8
  3489                           
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _Lcd_Set_Cursor8: [wreg+status,2+status,0+pclath+cstack]
  3493                           ;Lcd_Set_Cursor8@a stored from wreg
  3494     07D6  1683               	bsf	3,5	;RP0=1, select bank1
  3495     07D7  1303               	bcf	3,6	;RP1=0, select bank1
  3496     07D8  00A5               	movwf	Lcd_Set_Cursor8@a^(0+128)
  3497     07D9                     l2583:
  3498                           
  3499                           ;LCD8bits.c: 34:     char temp, z, y;;LCD8bits.c: 35:     if (a == 1) {
  3500     07D9  0325               	decf	Lcd_Set_Cursor8@a^(0+128),w
  3501     07DA  1D03               	btfss	3,2
  3502     07DB  2FDD               	goto	u2161
  3503     07DC  2FDE               	goto	u2160
  3504     07DD                     u2161:
  3505     07DD  2FE8               	goto	l2589
  3506     07DE                     u2160:
  3507     07DE                     l2585:
  3508                           
  3509                           ;LCD8bits.c: 36:         temp = 0x80 + b - 1;
  3510     07DE  0824               	movf	Lcd_Set_Cursor8@b^(0+128),w
  3511     07DF  3E7F               	addlw	127
  3512     07E0  00A6               	movwf	Lcd_Set_Cursor8@temp^(0+128)
  3513     07E1                     l2587:
  3514                           
  3515                           ;LCD8bits.c: 37:         Lcd_Cmd8(temp);
  3516     07E1  0826               	movf	Lcd_Set_Cursor8@temp^(0+128),w
  3517     07E2  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3518                           
  3519                           ;LCD8bits.c: 38:     } else if (a == 2) {
  3520     07E7  2FF7               	goto	l217
  3521     07E8                     l2589:
  3522     07E8  3002               	movlw	2
  3523     07E9  0625               	xorwf	Lcd_Set_Cursor8@a^(0+128),w
  3524     07EA  1D03               	btfss	3,2
  3525     07EB  2FED               	goto	u2171
  3526     07EC  2FEE               	goto	u2170
  3527     07ED                     u2171:
  3528     07ED  2FF7               	goto	l217
  3529     07EE                     u2170:
  3530     07EE                     l2591:
  3531                           
  3532                           ;LCD8bits.c: 39:         temp = 0xC0 + b - 1;
  3533     07EE  0824               	movf	Lcd_Set_Cursor8@b^(0+128),w
  3534     07EF  3EBF               	addlw	191
  3535     07F0  00A6               	movwf	Lcd_Set_Cursor8@temp^(0+128)
  3536     07F1                     l2593:
  3537                           
  3538                           ;LCD8bits.c: 40:         Lcd_Cmd8(temp);
  3539     07F1  0826               	movf	Lcd_Set_Cursor8@temp^(0+128),w
  3540     07F2  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3541     07F7                     l217:
  3542     07F7  0008               	return
  3543     07F8                     __end_of_Lcd_Set_Cursor8:
  3544                           
  3545                           	psect	text15
  3546     03FB                     __ptext15:	
  3547 ;; *************** function _Lcd_Init8 *****************
  3548 ;; Defined at:
  3549 ;;		line 44 in file "LCD8bits.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2, status,0, pclath, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3563 ;;      Params:         0       0       0       0       0
  3564 ;;      Locals:         0       0       0       0       0
  3565 ;;      Temps:          0       0       2       0       0
  3566 ;;      Totals:         0       0       2       0       0
  3567 ;;Total ram usage:        2 bytes
  3568 ;; Hardware stack levels used: 1
  3569 ;; Hardware stack levels required when called: 6
  3570 ;; This function calls:
  3571 ;;		_Lcd_Cmd8
  3572 ;;		_Lcd_Port8
  3573 ;; This function is called by:
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578     03FB                     _Lcd_Init8:	
  3579                           ;psect for function _Lcd_Init8
  3580                           
  3581     03FB                     l2557:	
  3582                           ;incstack = 0
  3583                           ; Regs used in _Lcd_Init8: [wreg+status,2+status,0+pclath+cstack]
  3584                           
  3585                           
  3586                           ;LCD8bits.c: 45:     Lcd_Port8(0x00);
  3587     03FB  3000               	movlw	0
  3588     03FC  120A  158A  2764  120A  118A  	fcall	_Lcd_Port8
  3589     0401                     l2559:
  3590                           
  3591                           ;LCD8bits.c: 46:     _delay((unsigned long)((20)*(8000000/4000.0)));
  3592     0401  3034               	movlw	52
  3593     0402  1683               	bsf	3,5	;RP0=1, select bank1
  3594     0403  1303               	bcf	3,6	;RP1=0, select bank1
  3595     0404  00A5               	movwf	(??_Lcd_Init8^(0+128)+1)
  3596     0405  30F1               	movlw	241
  3597     0406  00A4               	movwf	??_Lcd_Init8^(0+128)
  3598     0407                     u2257:
  3599     0407  0BA4               	decfsz	??_Lcd_Init8^(0+128),f
  3600     0408  2C07               	goto	u2257
  3601     0409  0BA5               	decfsz	(??_Lcd_Init8^(0+128)+1),f
  3602     040A  2C07               	goto	u2257
  3603     040B                     l2561:
  3604                           
  3605                           ;LCD8bits.c: 47:     Lcd_Cmd8(0x30);
  3606     040B  3030               	movlw	48
  3607     040C  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3608                           
  3609                           ;LCD8bits.c: 48:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3610     0411  300D               	movlw	13
  3611     0412  1683               	bsf	3,5	;RP0=1, select bank1
  3612     0413  1303               	bcf	3,6	;RP1=0, select bank1
  3613     0414  00A5               	movwf	(??_Lcd_Init8^(0+128)+1)
  3614     0415  30FB               	movlw	251
  3615     0416  00A4               	movwf	??_Lcd_Init8^(0+128)
  3616     0417                     u2267:
  3617     0417  0BA4               	decfsz	??_Lcd_Init8^(0+128),f
  3618     0418  2C17               	goto	u2267
  3619     0419  0BA5               	decfsz	(??_Lcd_Init8^(0+128)+1),f
  3620     041A  2C17               	goto	u2267
  3621     041B                     l2563:
  3622                           
  3623                           ;LCD8bits.c: 49:     Lcd_Cmd8(0x30);
  3624     041B  3030               	movlw	48
  3625     041C  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3626     0421                     l2565:
  3627                           
  3628                           ;LCD8bits.c: 50:     _delay((unsigned long)((11)*(8000000/4000.0)));
  3629     0421  301D               	movlw	29
  3630     0422  1683               	bsf	3,5	;RP0=1, select bank1
  3631     0423  1303               	bcf	3,6	;RP1=0, select bank1
  3632     0424  00A5               	movwf	(??_Lcd_Init8^(0+128)+1)
  3633     0425  3090               	movlw	144
  3634     0426  00A4               	movwf	??_Lcd_Init8^(0+128)
  3635     0427                     u2277:
  3636     0427  0BA4               	decfsz	??_Lcd_Init8^(0+128),f
  3637     0428  2C27               	goto	u2277
  3638     0429  0BA5               	decfsz	(??_Lcd_Init8^(0+128)+1),f
  3639     042A  2C27               	goto	u2277
  3640     042B  0000               	nop
  3641                           
  3642                           ;LCD8bits.c: 51:     Lcd_Cmd8(0x30);
  3643     042C  3030               	movlw	48
  3644     042D  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3645                           
  3646                           ;LCD8bits.c: 53:     Lcd_Cmd8(0x3C);
  3647     0432  303C               	movlw	60
  3648     0433  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3649                           
  3650                           ;LCD8bits.c: 57:     Lcd_Cmd8(0x0C);
  3651     0438  300C               	movlw	12
  3652     0439  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3653                           
  3654                           ;LCD8bits.c: 58:     Lcd_Cmd8(0x01);
  3655     043E  3001               	movlw	1
  3656     043F  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3657                           
  3658                           ;LCD8bits.c: 60:     Lcd_Cmd8(0x06);
  3659     0444  3006               	movlw	6
  3660     0445  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd8
  3661     044A                     l220:
  3662     044A  0008               	return
  3663     044B                     __end_of_Lcd_Init8:
  3664                           
  3665                           	psect	text16
  3666     0F76                     __ptext16:	
  3667 ;; *************** function _Lcd_Clear8 *****************
  3668 ;; Defined at:
  3669 ;;		line 28 in file "LCD8bits.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;		None
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;		None
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, status,2, status,0, pclath, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3683 ;;      Params:         0       0       0       0       0
  3684 ;;      Locals:         0       0       0       0       0
  3685 ;;      Temps:          0       0       0       0       0
  3686 ;;      Totals:         0       0       0       0       0
  3687 ;;Total ram usage:        0 bytes
  3688 ;; Hardware stack levels used: 1
  3689 ;; Hardware stack levels required when called: 6
  3690 ;; This function calls:
  3691 ;;		_Lcd_Cmd8
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697     0F76                     _Lcd_Clear8:	
  3698                           ;psect for function _Lcd_Clear8
  3699                           
  3700     0F76                     l2567:	
  3701                           ;incstack = 0
  3702                           ; Regs used in _Lcd_Clear8: [wreg+status,2+status,0+pclath+cstack]
  3703                           
  3704                           
  3705                           ;LCD8bits.c: 29:     Lcd_Cmd8(0);
  3706     0F76  3000               	movlw	0
  3707     0F77  120A  158A  27B4  120A  158A  	fcall	_Lcd_Cmd8
  3708                           
  3709                           ;LCD8bits.c: 30:     Lcd_Cmd8(1);
  3710     0F7C  3001               	movlw	1
  3711     0F7D  120A  158A  27B4  120A  158A  	fcall	_Lcd_Cmd8
  3712     0F82                     l211:
  3713     0F82  0008               	return
  3714     0F83                     __end_of_Lcd_Clear8:
  3715                           
  3716                           	psect	text17
  3717     0FB4                     __ptext17:	
  3718 ;; *************** function _Lcd_Cmd8 *****************
  3719 ;; Defined at:
  3720 ;;		line 20 in file "LCD8bits.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  a               1    wreg     unsigned char 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  a               1    3[BANK1 ] unsigned char 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3734 ;;      Params:         0       0       0       0       0
  3735 ;;      Locals:         0       0       1       0       0
  3736 ;;      Temps:          0       0       2       0       0
  3737 ;;      Totals:         0       0       3       0       0
  3738 ;;Total ram usage:        3 bytes
  3739 ;; Hardware stack levels used: 1
  3740 ;; Hardware stack levels required when called: 5
  3741 ;; This function calls:
  3742 ;;		_Lcd_Port8
  3743 ;; This function is called by:
  3744 ;;		_Lcd_Clear8
  3745 ;;		_Lcd_Set_Cursor8
  3746 ;;		_Lcd_Init8
  3747 ;;		_Lcd_Shift_Right8
  3748 ;;		_Lcd_Shift_Left8
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752     0FB4                     _Lcd_Cmd8:	
  3753                           ;psect for function _Lcd_Cmd8
  3754                           
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _Lcd_Cmd8: [wreg+status,2+status,0+pclath+cstack]
  3758                           ;Lcd_Cmd8@a stored from wreg
  3759     0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  3760     0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  3761     0FB6  00A3               	movwf	Lcd_Cmd8@a^(0+128)
  3762     0FB7                     l2503:
  3763                           
  3764                           ;LCD8bits.c: 21:     PORTCbits.RC0 = 0;
  3765     0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  3766     0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  3767     0FB9  1007               	bcf	7,0	;volatile
  3768     0FBA                     l2505:
  3769                           
  3770                           ;LCD8bits.c: 22:     Lcd_Port8(a);
  3771     0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  3772     0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  3773     0FBC  0823               	movf	Lcd_Cmd8@a^(0+128),w
  3774     0FBD  120A  158A  2764  120A  158A  	fcall	_Lcd_Port8
  3775     0FC2                     l2507:
  3776                           
  3777                           ;LCD8bits.c: 23:     PORTCbits.RC1 = 1;
  3778     0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  3779     0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  3780     0FC4  1487               	bsf	7,1	;volatile
  3781     0FC5                     l2509:
  3782                           
  3783                           ;LCD8bits.c: 24:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3784     0FC5  300B               	movlw	11
  3785     0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  3786     0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  3787     0FC8  00A2               	movwf	(??_Lcd_Cmd8^(0+128)+1)
  3788     0FC9  3061               	movlw	97
  3789     0FCA  00A1               	movwf	??_Lcd_Cmd8^(0+128)
  3790     0FCB                     u2287:
  3791     0FCB  0BA1               	decfsz	??_Lcd_Cmd8^(0+128),f
  3792     0FCC  2FCB               	goto	u2287
  3793     0FCD  0BA2               	decfsz	(??_Lcd_Cmd8^(0+128)+1),f
  3794     0FCE  2FCB               	goto	u2287
  3795     0FCF  2FD0               	nop2
  3796     0FD0                     l2511:
  3797                           
  3798                           ;LCD8bits.c: 25:     PORTCbits.RC1 = 0;
  3799     0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  3800     0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  3801     0FD2  1087               	bcf	7,1	;volatile
  3802     0FD3                     l208:
  3803     0FD3  0008               	return
  3804     0FD4                     __end_of_Lcd_Cmd8:
  3805                           
  3806                           	psect	text18
  3807     0F64                     __ptext18:	
  3808 ;; *************** function _Lcd_Port8 *****************
  3809 ;; Defined at:
  3810 ;;		line 16 in file "LCD8bits.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  a               1    wreg     unsigned char 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  a               1    0[BANK1 ] unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3824 ;;      Params:         0       0       0       0       0
  3825 ;;      Locals:         0       0       1       0       0
  3826 ;;      Temps:          0       0       0       0       0
  3827 ;;      Totals:         0       0       1       0       0
  3828 ;;Total ram usage:        1 bytes
  3829 ;; Hardware stack levels used: 1
  3830 ;; Hardware stack levels required when called: 4
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_Lcd_Cmd8
  3835 ;;		_Lcd_Init8
  3836 ;;		_Lcd_Write_Char8
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840     0F64                     _Lcd_Port8:	
  3841                           ;psect for function _Lcd_Port8
  3842                           
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _Lcd_Port8: [wreg]
  3846                           ;Lcd_Port8@a stored from wreg
  3847     0F64  1683               	bsf	3,5	;RP0=1, select bank1
  3848     0F65  1303               	bcf	3,6	;RP1=0, select bank1
  3849     0F66  00A0               	movwf	Lcd_Port8@a^(0+128)
  3850     0F67                     l2253:
  3851                           
  3852                           ;LCD8bits.c: 17:     PORTD = a;
  3853     0F67  0820               	movf	Lcd_Port8@a^(0+128),w
  3854     0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3855     0F69  1303               	bcf	3,6	;RP1=0, select bank0
  3856     0F6A  0088               	movwf	8	;volatile
  3857     0F6B                     l205:
  3858     0F6B  0008               	return
  3859     0F6C                     __end_of_Lcd_Port8:
  3860                           
  3861                           	psect	text19
  3862     031F                     __ptext19:	
  3863 ;; *************** function _isr *****************
  3864 ;; Defined at:
  3865 ;;		line 59 in file "Lab02.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;		None
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3879 ;;      Params:         0       0       0       0       0
  3880 ;;      Locals:         0       0       0       0       0
  3881 ;;      Temps:          0       6       0       0       0
  3882 ;;      Totals:         0       6       0       0       0
  3883 ;;Total ram usage:        6 bytes
  3884 ;; Hardware stack levels used: 1
  3885 ;; Hardware stack levels required when called: 3
  3886 ;; This function calls:
  3887 ;;		_UART_read_char
  3888 ;;		_UART_write_char
  3889 ;;		_adc_read
  3890 ;; This function is called by:
  3891 ;;		Interrupt level 1
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895     031F                     _isr:	
  3896                           ;psect for function _isr
  3897                           
  3898     031F                     i1l2125:
  3899                           
  3900                           ;Lab02.c: 60:     if(PIR1bits.RCIF){
  3901     031F  1E8C               	btfss	12,5	;volatile
  3902     0320  2B22               	goto	u166_21
  3903     0321  2B23               	goto	u166_20
  3904     0322                     u166_21:
  3905     0322  2B7E               	goto	i1l167
  3906     0323                     u166_20:
  3907     0323                     i1l2127:
  3908                           
  3909                           ;Lab02.c: 61:         opcion = RCREG;
  3910     0323  081A               	movf	26,w	;volatile
  3911     0324  00BF               	movwf	??_isr
  3912     0325  01C0               	clrf	??_isr+1
  3913     0326  083F               	movf	??_isr,w
  3914     0327  00C7               	movwf	_opcion
  3915     0328  0840               	movf	??_isr+1,w
  3916     0329  00C8               	movwf	_opcion+1
  3917                           
  3918                           ;Lab02.c: 63:         switch(opcion){
  3919     032A  2B71               	goto	i1l2143
  3920     032B                     i1l2129:
  3921                           
  3922                           ;Lab02.c: 65:                 UART_write_char("El valor del potenciometro es:");
  3923     032B  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3924     032C  00F0               	movwf	UART_write_char@txt
  3925     032D  3080               	movlw	128
  3926     032E  00F1               	movwf	UART_write_char@txt+1
  3927     032F  120A  118A  25EF  120A  118A  	fcall	_UART_write_char
  3928                           
  3929                           ;Lab02.c: 66:                 UART_write_char(CVPOT);
  3930     0334  304A               	movlw	(low (_CVPOT| 0))& (0+255)
  3931     0335  00F0               	movwf	UART_write_char@txt
  3932     0336  3000               	movlw	0
  3933     0337  00F1               	movwf	UART_write_char@txt+1
  3934     0338  120A  118A  25EF  120A  118A  	fcall	_UART_write_char
  3935                           
  3936                           ;Lab02.c: 68:                 UART_write_char(menu);
  3937     033D  3090               	movlw	(low (_menu| (0+256)))& (0+255)
  3938     033E  00F0               	movwf	UART_write_char@txt
  3939     033F  3001               	movlw	1
  3940     0340  00F1               	movwf	UART_write_char@txt+1
  3941     0341  120A  118A  25EF  120A  118A  	fcall	_UART_write_char
  3942                           
  3943                           ;Lab02.c: 69:                 break;
  3944     0346  2B7E               	goto	i1l167
  3945     0347                     i1l2131:
  3946                           
  3947                           ;Lab02.c: 72:                     CONT = UART_read_char();
  3948     0347  120A  158A  27D4  120A  118A  	fcall	_UART_read_char
  3949     034C  1283               	bcf	3,5	;RP0=0, select bank0
  3950     034D  1303               	bcf	3,6	;RP1=0, select bank0
  3951     034E  00C9               	movwf	_CONT
  3952     034F                     i1l2133:
  3953                           
  3954                           ;Lab02.c: 71:                 while(RCREG != 32){
  3955     034F  3020               	movlw	32
  3956     0350  061A               	xorwf	26,w	;volatile
  3957     0351  1D03               	btfss	3,2
  3958     0352  2B54               	goto	u167_21
  3959     0353  2B55               	goto	u167_20
  3960     0354                     u167_21:
  3961     0354  2B47               	goto	i1l2131
  3962     0355                     u167_20:
  3963     0355                     i1l2135:
  3964                           
  3965                           ;Lab02.c: 74:                 UART_write_char(menu);
  3966     0355  3090               	movlw	(low (_menu| (0+256)))& (0+255)
  3967     0356  00F0               	movwf	UART_write_char@txt
  3968     0357  3001               	movlw	1
  3969     0358  00F1               	movwf	UART_write_char@txt+1
  3970     0359  120A  118A  25EF  120A  118A  	fcall	_UART_write_char
  3971                           
  3972                           ;Lab02.c: 75:                 break;
  3973     035E  2B7E               	goto	i1l167
  3974     035F                     i1l2137:
  3975                           
  3976                           ;Lab02.c: 78:                 UART_write_char("No existe esa opcion \r");
  3977     035F  302A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3978     0360  00F0               	movwf	UART_write_char@txt
  3979     0361  3080               	movlw	128
  3980     0362  00F1               	movwf	UART_write_char@txt+1
  3981     0363  120A  118A  25EF  120A  118A  	fcall	_UART_write_char
  3982     0368                     i1l2139:	
  3983                           ;Lab02.c: 79:                 while(RCREG != 32);
  3984                           
  3985     0368  3020               	movlw	32
  3986     0369  1283               	bcf	3,5	;RP0=0, select bank0
  3987     036A  1303               	bcf	3,6	;RP1=0, select bank0
  3988     036B  061A               	xorwf	26,w	;volatile
  3989     036C  1D03               	btfss	3,2
  3990     036D  2B6F               	goto	u168_21
  3991     036E  2B70               	goto	u168_20
  3992     036F                     u168_21:
  3993     036F  2B68               	goto	i1l2139
  3994     0370                     u168_20:
  3995     0370  2B55               	goto	i1l2135
  3996     0371                     i1l2143:
  3997                           
  3998                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3999                           ; Switch size 1, requested type "simple"
  4000                           ; Number of cases is 1, Range of values is 0 to 0
  4001                           ; switch strategies available:
  4002                           ; Name         Instructions Cycles
  4003                           ; simple_byte            4     3 (average)
  4004                           ; direct_byte           11     8 (fixed)
  4005                           ; jumptable            260     6 (fixed)
  4006                           ;	Chosen strategy is simple_byte
  4007     0371  0848               	movf	_opcion+1,w
  4008     0372  3A00               	xorlw	0	; case 0
  4009     0373  1903               	skipnz
  4010     0374  2B76               	goto	i1l2703
  4011     0375  2B5F               	goto	i1l2137
  4012     0376                     i1l2703:
  4013                           
  4014                           ; Switch size 1, requested type "simple"
  4015                           ; Number of cases is 2, Range of values is 49 to 50
  4016                           ; switch strategies available:
  4017                           ; Name         Instructions Cycles
  4018                           ; simple_byte            7     4 (average)
  4019                           ; direct_byte           17    11 (fixed)
  4020                           ; jumptable            263     9 (fixed)
  4021                           ;	Chosen strategy is simple_byte
  4022     0376  0847               	movf	_opcion,w
  4023     0377  3A31               	xorlw	49	; case 49
  4024     0378  1903               	skipnz
  4025     0379  2B2B               	goto	i1l2129
  4026     037A  3A03               	xorlw	3	; case 50
  4027     037B  1903               	skipnz
  4028     037C  2B4F               	goto	i1l2133
  4029     037D  2B5F               	goto	i1l2137
  4030     037E                     i1l167:	
  4031                           ;Lab02.c: 83:     }
  4032                           
  4033                           
  4034                           ;Lab02.c: 86:     if (PIR1bits.ADIF) {
  4035     037E  1283               	bcf	3,5	;RP0=0, select bank0
  4036     037F  1303               	bcf	3,6	;RP1=0, select bank0
  4037     0380  1F0C               	btfss	12,6	;volatile
  4038     0381  2B83               	goto	u169_21
  4039     0382  2B84               	goto	u169_20
  4040     0383                     u169_21:
  4041     0383  2B92               	goto	i1l180
  4042     0384                     u169_20:
  4043     0384                     i1l2145:
  4044                           
  4045                           ;Lab02.c: 87:         numero = adc_read();
  4046     0384  120A  158A  276C  120A  118A  	fcall	_adc_read
  4047     0389  0871               	movf	?_adc_read+1,w
  4048     038A  1683               	bsf	3,5	;RP0=1, select bank1
  4049     038B  1303               	bcf	3,6	;RP1=0, select bank1
  4050     038C  00D0               	movwf	(_numero+1)^(0+128)
  4051     038D  0870               	movf	?_adc_read,w
  4052     038E  00CF               	movwf	_numero^(0+128)
  4053     038F                     i1l2147:
  4054                           
  4055                           ;Lab02.c: 88:         PIR1bits.ADIF = 0;
  4056     038F  1283               	bcf	3,5	;RP0=0, select bank0
  4057     0390  1303               	bcf	3,6	;RP1=0, select bank0
  4058     0391  130C               	bcf	12,6	;volatile
  4059     0392                     i1l180:
  4060     0392  0844               	movf	??_isr+5,w
  4061     0393  00FF               	movwf	btemp+1
  4062     0394  0843               	movf	??_isr+4,w
  4063     0395  008A               	movwf	10
  4064     0396  0842               	movf	??_isr+3,w
  4065     0397  0084               	movwf	4
  4066     0398  0E41               	swapf	??_isr+2,w
  4067     0399  0083               	movwf	3
  4068     039A  0EFE               	swapf	btemp,f
  4069     039B  0E7E               	swapf	btemp,w
  4070     039C  0009               	retfie
  4071     039D                     __end_of_isr:
  4072                           
  4073                           	psect	intentry
  4074     0004                     __pintentry:	
  4075                           ;incstack = 0
  4076                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4077                           
  4078     0004                     interrupt_function:
  4079     007E                     saved_w	set	btemp
  4080     0004  00FE               	movwf	btemp
  4081     0005  0E03               	swapf	3,w
  4082     0006  1283               	bcf	3,5	;RP0=0, select bank0
  4083     0007  1303               	bcf	3,6	;RP1=0, select bank0
  4084     0008  00C1               	movwf	??_isr+2
  4085     0009  0804               	movf	4,w
  4086     000A  00C2               	movwf	??_isr+3
  4087     000B  080A               	movf	10,w
  4088     000C  00C3               	movwf	??_isr+4
  4089     000D  087F               	movf	btemp+1,w
  4090     000E  00C4               	movwf	??_isr+5
  4091     000F  120A  118A  2B1F   	ljmp	_isr
  4092                           
  4093                           	psect	text20
  4094     0F6C                     __ptext20:	
  4095 ;; *************** function _adc_read *****************
  4096 ;; Defined at:
  4097 ;;		line 42 in file "ADC.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;		None
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  2    0[COMMON] int 
  4104 ;; Registers used:
  4105 ;;		wreg
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4111 ;;      Params:         2       0       0       0       0
  4112 ;;      Locals:         0       0       0       0       0
  4113 ;;      Temps:          2       0       0       0       0
  4114 ;;      Totals:         4       0       0       0       0
  4115 ;;Total ram usage:        4 bytes
  4116 ;; Hardware stack levels used: 1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_isr
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124     0F6C                     _adc_read:	
  4125                           ;psect for function _adc_read
  4126                           
  4127     0F6C                     i1l2017:	
  4128                           ;incstack = 0
  4129                           ; Regs used in _adc_read: [wreg]
  4130                           
  4131                           
  4132                           ;ADC.c: 43:     return ADRESH;
  4133     0F6C  1283               	bcf	3,5	;RP0=0, select bank0
  4134     0F6D  1303               	bcf	3,6	;RP1=0, select bank0
  4135     0F6E  081E               	movf	30,w	;volatile
  4136     0F6F  00F2               	movwf	??_adc_read
  4137     0F70  01F3               	clrf	??_adc_read+1
  4138     0F71  0872               	movf	??_adc_read,w
  4139     0F72  00F0               	movwf	?_adc_read
  4140     0F73  0873               	movf	??_adc_read+1,w
  4141     0F74  00F1               	movwf	?_adc_read+1
  4142     0F75                     i1l20:
  4143     0F75  0008               	return
  4144     0F76                     __end_of_adc_read:
  4145                           
  4146                           	psect	text21
  4147     05EF                     __ptext21:	
  4148 ;; *************** function _UART_write_char *****************
  4149 ;; Defined at:
  4150 ;;		line 73 in file "USART.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;  txt             2    0[COMMON] PTR unsigned char 
  4153 ;;		 -> STR_2(23), menu(66), CVPOT(15), STR_1(31), 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  i               2    5[COMMON] int 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4165 ;;      Params:         2       0       0       0       0
  4166 ;;      Locals:         2       0       0       0       0
  4167 ;;      Temps:          3       0       0       0       0
  4168 ;;      Totals:         7       0       0       0       0
  4169 ;;Total ram usage:        7 bytes
  4170 ;; Hardware stack levels used: 2
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_isr
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178     05EF                     _UART_write_char:	
  4179                           ;psect for function _UART_write_char
  4180                           
  4181     05EF                     i1l2021:	
  4182                           ;incstack = 0
  4183                           ; Regs used in _UART_write_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4184                           
  4185                           
  4186                           ;USART.c: 74:     int i;;USART.c: 75:     for(i = 0; txt[i] != '\0'; i++){
  4187     05EF  01F5               	clrf	UART_write_char@i
  4188     05F0  01F6               	clrf	UART_write_char@i+1
  4189     05F1  2E14               	goto	i1l2027
  4190     05F2                     i1l288:
  4191     05F2  1E0C               	btfss	12,4	;volatile
  4192     05F3  2DF5               	goto	u156_21
  4193     05F4  2DF6               	goto	u156_20
  4194     05F5                     u156_21:
  4195     05F5  2DF2               	goto	i1l288
  4196     05F6                     u156_20:
  4197     05F6                     i1l2023:
  4198                           
  4199                           ;USART.c: 79:         TXREG = txt[i];
  4200     05F6  0875               	movf	UART_write_char@i,w
  4201     05F7  0770               	addwf	UART_write_char@txt,w
  4202     05F8  00F3               	movwf	??_UART_write_char+1
  4203     05F9  0871               	movf	UART_write_char@txt+1,w
  4204     05FA  00F2               	movwf	??_UART_write_char
  4205     05FB  1803               	skipnc
  4206     05FC  0AF2               	incf	??_UART_write_char,f
  4207     05FD  1FF5               	btfss	UART_write_char@i,7
  4208     05FE  2E00               	goto	u157_20
  4209     05FF  03F2               	decf	??_UART_write_char,f
  4210     0600                     u157_20:
  4211     0600  0872               	movf	??_UART_write_char,w
  4212     0601  00F4               	movwf	??_UART_write_char+2
  4213     0602  0874               	movf	??_UART_write_char+2,w
  4214     0603  1283               	bcf	3,5	;RP0=0, select bank0
  4215     0604  1303               	bcf	3,6	;RP1=0, select bank0
  4216     0605  00FF               	movwf	btemp+1
  4217     0606  0873               	movf	??_UART_write_char+1,w
  4218     0607  0084               	movwf	4
  4219     0608  120A  118A  239D  120A  118A  	fcall	stringtab
  4220     060D  0099               	movwf	25	;volatile
  4221     060E                     i1l2025:
  4222                           
  4223                           ;USART.c: 80:     }
  4224     060E  3001               	movlw	1
  4225     060F  07F5               	addwf	UART_write_char@i,f
  4226     0610  1803               	skipnc
  4227     0611  0AF6               	incf	UART_write_char@i+1,f
  4228     0612  3000               	movlw	0
  4229     0613  07F6               	addwf	UART_write_char@i+1,f
  4230     0614                     i1l2027:
  4231     0614  0875               	movf	UART_write_char@i,w
  4232     0615  0770               	addwf	UART_write_char@txt,w
  4233     0616  00F3               	movwf	??_UART_write_char+1
  4234     0617  0871               	movf	UART_write_char@txt+1,w
  4235     0618  00F2               	movwf	??_UART_write_char
  4236     0619  1803               	skipnc
  4237     061A  0AF2               	incf	??_UART_write_char,f
  4238     061B  1FF5               	btfss	UART_write_char@i,7
  4239     061C  2E1E               	goto	u158_20
  4240     061D  03F2               	decf	??_UART_write_char,f
  4241     061E                     u158_20:
  4242     061E  0872               	movf	??_UART_write_char,w
  4243     061F  00F4               	movwf	??_UART_write_char+2
  4244     0620  0874               	movf	??_UART_write_char+2,w
  4245     0621  1283               	bcf	3,5	;RP0=0, select bank0
  4246     0622  1303               	bcf	3,6	;RP1=0, select bank0
  4247     0623  00FF               	movwf	btemp+1
  4248     0624  0873               	movf	??_UART_write_char+1,w
  4249     0625  0084               	movwf	4
  4250     0626  120A  118A  239D  120A  118A  	fcall	stringtab
  4251     062B  3A00               	xorlw	0
  4252     062C  1D03               	skipz
  4253     062D  2E2F               	goto	u159_21
  4254     062E  2E30               	goto	u159_20
  4255     062F                     u159_21:
  4256     062F  2DF2               	goto	i1l288
  4257     0630                     u159_20:
  4258     0630                     i1l292:
  4259     0630  0008               	return
  4260     0631                     __end_of_UART_write_char:
  4261                           
  4262                           	psect	text22
  4263     0FD4                     __ptext22:	
  4264 ;; *************** function _UART_read_char *****************
  4265 ;; Defined at:
  4266 ;;		line 84 in file "USART.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  CONT           15   15[BANK0 ] unsigned char [15]
  4271 ;;  caracter        1   30[BANK0 ] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      unsigned char 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         0       0       0       0       0
  4282 ;;      Locals:         0      16       0       0       0
  4283 ;;      Temps:          0       2       0       0       0
  4284 ;;      Totals:         0      18       0       0       0
  4285 ;;Total ram usage:       18 bytes
  4286 ;; Hardware stack levels used: 1
  4287 ;; Hardware stack levels required when called: 2
  4288 ;; This function calls:
  4289 ;;		i1_sprintf
  4290 ;; This function is called by:
  4291 ;;		_isr
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295     0FD4                     _UART_read_char:	
  4296                           ;psect for function _UART_read_char
  4297                           
  4298     0FD4                     i1l2029:	
  4299                           ;incstack = 0
  4300                           ; Regs used in _UART_read_char: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4301                           
  4302     0FD4                     i1l295:	
  4303                           ;USART.c: 85:     while(!PIR1bits.RCIF);
  4304                           
  4305     0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  4306     0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  4307     0FD6  1E8C               	btfss	12,5	;volatile
  4308     0FD7  2FD9               	goto	u160_21
  4309     0FD8  2FDA               	goto	u160_20
  4310     0FD9                     u160_21:
  4311     0FD9  2FD4               	goto	i1l295
  4312     0FDA                     u160_20:
  4313     0FDA                     i1l2031:
  4314                           
  4315                           ;USART.c: 86:     char CONT[15];;USART.c: 87:     char caracter = RCREG;
  4316     0FDA  081A               	movf	26,w	;volatile
  4317     0FDB  00BE               	movwf	UART_read_char@caracter
  4318     0FDC                     i1l2033:
  4319                           
  4320                           ;USART.c: 88:     if (caracter == '+'){
  4321     0FDC  302B               	movlw	43
  4322     0FDD  063E               	xorwf	UART_read_char@caracter,w
  4323     0FDE  1D03               	btfss	3,2
  4324     0FDF  2FE1               	goto	u161_21
  4325     0FE0  2FE2               	goto	u161_20
  4326     0FE1                     u161_21:
  4327     0FE1  2FE7               	goto	i1l2037
  4328     0FE2                     u161_20:
  4329     0FE2                     i1l2035:
  4330                           
  4331                           ;USART.c: 89:         PORTB++;
  4332     0FE2  3001               	movlw	1
  4333     0FE3  00AD               	movwf	??_UART_read_char
  4334     0FE4  082D               	movf	??_UART_read_char,w
  4335     0FE5  0786               	addwf	6,f	;volatile
  4336                           
  4337                           ;USART.c: 90:     }
  4338     0FE6  2FEF               	goto	i1l2041
  4339     0FE7                     i1l2037:
  4340     0FE7  302D               	movlw	45
  4341     0FE8  063E               	xorwf	UART_read_char@caracter,w
  4342     0FE9  1D03               	btfss	3,2
  4343     0FEA  2FEC               	goto	u162_21
  4344     0FEB  2FED               	goto	u162_20
  4345     0FEC                     u162_21:
  4346     0FEC  2FEF               	goto	i1l2041
  4347     0FED                     u162_20:
  4348     0FED                     i1l2039:
  4349                           
  4350                           ;USART.c: 92:         PORTB--;
  4351     0FED  3001               	movlw	1
  4352     0FEE  0286               	subwf	6,f	;volatile
  4353     0FEF                     i1l2041:
  4354                           
  4355                           ;USART.c: 94:     sprintf(CONT, "%d\r", PORTB);
  4356     0FEF  304B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  4357     0FF0  00A0               	movwf	i1sprintf@f
  4358     0FF1  0806               	movf	6,w	;volatile
  4359     0FF2  00AD               	movwf	??_UART_read_char
  4360     0FF3  01AE               	clrf	??_UART_read_char+1
  4361     0FF4  082D               	movf	??_UART_read_char,w
  4362     0FF5  00A1               	movwf	?i1_sprintf+1
  4363     0FF6  082E               	movf	??_UART_read_char+1,w
  4364     0FF7  00A2               	movwf	?i1_sprintf+2
  4365     0FF8  302F               	movlw	(low (UART_read_char@CONT| 0))& (0+255)
  4366     0FF9  120A  118A  2112  120A  158A  	fcall	i1_sprintf
  4367     0FFE                     i1l2043:
  4368                           
  4369                           ;USART.c: 95:     return CONT;
  4370     0FFE  302F               	movlw	(low UART_read_char@CONT)& (0+255)
  4371     0FFF                     i1l301:
  4372     0FFF  0008               	return
  4373     1000                     __end_of_UART_read_char:
  4374                           
  4375                           	psect	text23
  4376     0112                     __ptext23:	
  4377 ;; *************** function i1_sprintf *****************
  4378 ;; Defined at:
  4379 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  sp              1    wreg     PTR unsigned char 
  4382 ;;		 -> UART_read_char@CONT(15), CVPOT(15), 
  4383 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  4384 ;;		 -> STR_6(4), STR_5(4), 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  4387 ;;		 -> UART_read_char@CONT(15), CVPOT(15), 
  4388 ;;  tmpval          4    0        struct .
  4389 ;;  val             2    9[BANK0 ] unsigned int 
  4390 ;;  cp              2    0        PTR const unsigned char 
  4391 ;;  len             2    0        unsigned int 
  4392 ;;  c               1   12[BANK0 ] unsigned char 
  4393 ;;  prec            1    8[BANK0 ] char 
  4394 ;;  flag            1    7[BANK0 ] unsigned char 
  4395 ;;  ap              1    6[BANK0 ] PTR void [1]
  4396 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  2    0[BANK0 ] int 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4406 ;;      Params:         0       3       0       0       0
  4407 ;;      Locals:         0       7       0       0       0
  4408 ;;      Temps:          0       3       0       0       0
  4409 ;;      Totals:         0      13       0       0       0
  4410 ;;Total ram usage:       13 bytes
  4411 ;; Hardware stack levels used: 1
  4412 ;; Hardware stack levels required when called: 1
  4413 ;; This function calls:
  4414 ;;		i1___lwdiv
  4415 ;;		i1___lwmod
  4416 ;; This function is called by:
  4417 ;;		_UART_read_char
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421     0112                     i1_sprintf:	
  4422                           ;psect for function i1_sprintf
  4423                           
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4427                           ;i1sprintf@sp stored from wreg
  4428     0112  1283               	bcf	3,5	;RP0=0, select bank0
  4429     0113  1303               	bcf	3,6	;RP1=0, select bank0
  4430     0114  00AB               	movwf	i1sprintf@sp
  4431     0115                     i1l1955:
  4432                           
  4433                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  4434     0115  3021               	movlw	(low ((?i1_sprintf| 0+1)))& (0+255)
  4435     0116  00A6               	movwf	i1sprintf@ap
  4436                           
  4437                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4438     0117  29D7               	goto	i1l2007
  4439     0118                     i1l1957:
  4440                           
  4441                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4442     0118  3025               	movlw	37
  4443     0119  062C               	xorwf	i1sprintf@c,w
  4444     011A  1903               	btfsc	3,2
  4445     011B  291D               	goto	u149_21
  4446     011C  291E               	goto	u149_20
  4447     011D                     u149_21:
  4448     011D  2928               	goto	i1l1963
  4449     011E                     u149_20:
  4450     011E                     i1l1959:
  4451                           
  4452                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4453     011E  082B               	movf	i1sprintf@sp,w
  4454     011F  0084               	movwf	4
  4455     0120  082C               	movf	i1sprintf@c,w
  4456     0121  1383               	bcf	3,7	;select IRP bank0
  4457     0122  0080               	movwf	0
  4458     0123                     i1l1961:
  4459     0123  3001               	movlw	1
  4460     0124  00A3               	movwf	??i1_sprintf
  4461     0125  0823               	movf	??i1_sprintf,w
  4462     0126  07AB               	addwf	i1sprintf@sp,f
  4463                           
  4464                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  4465     0127  29D7               	goto	i1l2007
  4466     0128                     i1l1963:
  4467                           
  4468                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4469     0128  01A7               	clrf	i1sprintf@flag
  4470     0129                     i1l1967:	
  4471                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  4472                           
  4473     0129  3001               	movlw	1
  4474     012A  07A0               	addwf	i1sprintf@f,f
  4475     012B  30FF               	movlw	-1
  4476     012C  0720               	addwf	i1sprintf@f,w
  4477     012D  0084               	movwf	4
  4478     012E  120A  118A  23A7  120A  118A  	fcall	stringdir
  4479     0133  00AC               	movwf	i1sprintf@c
  4480     0134  00A3               	movwf	??i1_sprintf
  4481     0135  01A4               	clrf	??i1_sprintf+1
  4482                           
  4483                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4484                           ; Switch size 1, requested type "simple"
  4485                           ; Number of cases is 1, Range of values is 0 to 0
  4486                           ; switch strategies available:
  4487                           ; Name         Instructions Cycles
  4488                           ; simple_byte            4     3 (average)
  4489                           ; direct_byte           11     8 (fixed)
  4490                           ; jumptable            260     6 (fixed)
  4491                           ;	Chosen strategy is simple_byte
  4492     0136  0824               	movf	??i1_sprintf+1,w
  4493     0137  3A00               	xorlw	0	; case 0
  4494     0138  1903               	skipnz
  4495     0139  293B               	goto	i1l2705
  4496     013A  29D7               	goto	i1l2007
  4497     013B                     i1l2705:
  4498                           
  4499                           ; Switch size 1, requested type "simple"
  4500                           ; Number of cases is 3, Range of values is 0 to 105
  4501                           ; switch strategies available:
  4502                           ; Name         Instructions Cycles
  4503                           ; simple_byte           10     6 (average)
  4504                           ; jumptable            260     6 (fixed)
  4505                           ;	Chosen strategy is simple_byte
  4506     013B  0823               	movf	??i1_sprintf,w
  4507     013C  3A00               	xorlw	0	; case 0
  4508     013D  1903               	skipnz
  4509     013E  29E7               	goto	i1l2009
  4510     013F  3A64               	xorlw	100	; case 100
  4511     0140  1903               	skipnz
  4512     0141  2946               	goto	i1l1969
  4513     0142  3A0D               	xorlw	13	; case 105
  4514     0143  1903               	skipnz
  4515     0144  2946               	goto	i1l1969
  4516     0145  29D7               	goto	i1l2007
  4517     0146                     i1l1969:
  4518                           
  4519                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4520     0146  0826               	movf	i1sprintf@ap,w
  4521     0147  0084               	movwf	4
  4522     0148  1383               	bcf	3,7	;select IRP bank0
  4523     0149  0800               	movf	0,w
  4524     014A  00A9               	movwf	i1sprintf@val
  4525     014B  0A84               	incf	4,f
  4526     014C  0800               	movf	0,w
  4527     014D  00AA               	movwf	i1sprintf@val+1
  4528     014E                     i1l1971:
  4529     014E  3002               	movlw	2
  4530     014F  00A3               	movwf	??i1_sprintf
  4531     0150  0823               	movf	??i1_sprintf,w
  4532     0151  07A6               	addwf	i1sprintf@ap,f
  4533     0152                     i1l1973:
  4534                           
  4535                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  4536     0152  1FAA               	btfss	i1sprintf@val+1,7
  4537     0153  2955               	goto	u150_21
  4538     0154  2956               	goto	u150_20
  4539     0155                     u150_21:
  4540     0155  295F               	goto	i1l1979
  4541     0156                     u150_20:
  4542     0156                     i1l1975:
  4543                           
  4544                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  4545     0156  3003               	movlw	3
  4546     0157  00A3               	movwf	??i1_sprintf
  4547     0158  0823               	movf	??i1_sprintf,w
  4548     0159  04A7               	iorwf	i1sprintf@flag,f
  4549     015A                     i1l1977:
  4550                           
  4551                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  4552     015A  09A9               	comf	i1sprintf@val,f
  4553     015B  09AA               	comf	i1sprintf@val+1,f
  4554     015C  0AA9               	incf	i1sprintf@val,f
  4555     015D  1903               	skipnz
  4556     015E  0AAA               	incf	i1sprintf@val+1,f
  4557     015F                     i1l1979:
  4558                           
  4559                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  4560     015F  01AC               	clrf	i1sprintf@c
  4561     0160  0AAC               	incf	i1sprintf@c,f
  4562     0161                     i1l1985:
  4563                           
  4564                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  4565     0161  082C               	movf	i1sprintf@c,w
  4566     0162  00A3               	movwf	??i1_sprintf
  4567     0163  0723               	addwf	??i1_sprintf,w
  4568     0164  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4569     0165  0084               	movwf	4
  4570     0166  120A  118A  23A7  120A  118A  	fcall	stringdir
  4571     016B  00A4               	movwf	??i1_sprintf+1
  4572     016C  120A  118A  23A7  120A  118A  	fcall	stringdir
  4573     0171  00A5               	movwf	??i1_sprintf+2
  4574     0172  0825               	movf	??i1_sprintf+2,w
  4575     0173  022A               	subwf	i1sprintf@val+1,w
  4576     0174  1D03               	skipz
  4577     0175  2978               	goto	u151_25
  4578     0176  0824               	movf	??i1_sprintf+1,w
  4579     0177  0229               	subwf	i1sprintf@val,w
  4580     0178                     u151_25:
  4581     0178  1803               	skipnc
  4582     0179  297B               	goto	u151_21
  4583     017A  297C               	goto	u151_20
  4584     017B                     u151_21:
  4585     017B  297D               	goto	i1l1989
  4586     017C                     u151_20:
  4587     017C  2987               	goto	i1l1991
  4588     017D                     i1l1989:
  4589     017D  3001               	movlw	1
  4590     017E  00A3               	movwf	??i1_sprintf
  4591     017F  0823               	movf	??i1_sprintf,w
  4592     0180  07AC               	addwf	i1sprintf@c,f
  4593     0181  3005               	movlw	5
  4594     0182  062C               	xorwf	i1sprintf@c,w
  4595     0183  1D03               	btfss	3,2
  4596     0184  2986               	goto	u152_21
  4597     0185  2987               	goto	u152_20
  4598     0186                     u152_21:
  4599     0186  2961               	goto	i1l1985
  4600     0187                     u152_20:
  4601     0187                     i1l1991:
  4602                           
  4603                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  4604     0187  0827               	movf	i1sprintf@flag,w
  4605     0188  3903               	andlw	3
  4606     0189  1903               	btfsc	3,2
  4607     018A  298C               	goto	u153_21
  4608     018B  298D               	goto	u153_20
  4609     018C                     u153_21:
  4610     018C  2996               	goto	i1l1997
  4611     018D                     u153_20:
  4612     018D                     i1l1993:
  4613                           
  4614                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4615     018D  082B               	movf	i1sprintf@sp,w
  4616     018E  0084               	movwf	4
  4617     018F  302D               	movlw	45
  4618     0190  1383               	bcf	3,7	;select IRP bank0
  4619     0191  0080               	movwf	0
  4620     0192                     i1l1995:
  4621     0192  3001               	movlw	1
  4622     0193  00A3               	movwf	??i1_sprintf
  4623     0194  0823               	movf	??i1_sprintf,w
  4624     0195  07AB               	addwf	i1sprintf@sp,f
  4625     0196                     i1l1997:
  4626                           
  4627                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4628     0196  082C               	movf	i1sprintf@c,w
  4629     0197  00A8               	movwf	i1sprintf@prec
  4630                           
  4631                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4632     0198  29CE               	goto	i1l2005
  4633     0199                     i1l1999:
  4634                           
  4635                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4636     0199  300A               	movlw	10
  4637     019A  00F8               	movwf	i1___lwmod@divisor
  4638     019B  3000               	movlw	0
  4639     019C  00F9               	movwf	i1___lwmod@divisor+1
  4640     019D  0828               	movf	i1sprintf@prec,w
  4641     019E  00A3               	movwf	??i1_sprintf
  4642     019F  0723               	addwf	??i1_sprintf,w
  4643     01A0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4644     01A1  0084               	movwf	4
  4645     01A2  120A  118A  23A7  120A  118A  	fcall	stringdir
  4646     01A7  00F0               	movwf	i1___lwdiv@divisor
  4647     01A8  120A  118A  23A7  120A  118A  	fcall	stringdir
  4648     01AD  00F1               	movwf	i1___lwdiv@divisor+1
  4649     01AE  082A               	movf	i1sprintf@val+1,w
  4650     01AF  00F3               	movwf	i1___lwdiv@dividend+1
  4651     01B0  0829               	movf	i1sprintf@val,w
  4652     01B1  00F2               	movwf	i1___lwdiv@dividend
  4653     01B2  120A  118A  2569  120A  118A  	fcall	i1___lwdiv
  4654     01B7  0871               	movf	?i1___lwdiv+1,w
  4655     01B8  00FB               	movwf	i1___lwmod@dividend+1
  4656     01B9  0870               	movf	?i1___lwdiv,w
  4657     01BA  00FA               	movwf	i1___lwmod@dividend
  4658     01BB  120A  118A  272C  120A  118A  	fcall	i1___lwmod
  4659     01C0  0878               	movf	?i1___lwmod,w
  4660     01C1  3E30               	addlw	48
  4661     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  4662     01C3  1303               	bcf	3,6	;RP1=0, select bank0
  4663     01C4  00AC               	movwf	i1sprintf@c
  4664     01C5                     i1l2001:
  4665                           
  4666                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4667     01C5  082B               	movf	i1sprintf@sp,w
  4668     01C6  0084               	movwf	4
  4669     01C7  082C               	movf	i1sprintf@c,w
  4670     01C8  1383               	bcf	3,7	;select IRP bank0
  4671     01C9  0080               	movwf	0
  4672     01CA                     i1l2003:
  4673     01CA  3001               	movlw	1
  4674     01CB  00A3               	movwf	??i1_sprintf
  4675     01CC  0823               	movf	??i1_sprintf,w
  4676     01CD  07AB               	addwf	i1sprintf@sp,f
  4677     01CE                     i1l2005:
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4680     01CE  30FF               	movlw	255
  4681     01CF  00A3               	movwf	??i1_sprintf
  4682     01D0  0823               	movf	??i1_sprintf,w
  4683     01D1  07A8               	addwf	i1sprintf@prec,f
  4684     01D2  0A28               	incf	i1sprintf@prec,w
  4685     01D3  1D03               	btfss	3,2
  4686     01D4  29D6               	goto	u154_21
  4687     01D5  29D7               	goto	u154_20
  4688     01D6                     u154_21:
  4689     01D6  2999               	goto	i1l1999
  4690     01D7                     u154_20:
  4691     01D7                     i1l2007:
  4692                           
  4693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4694     01D7  3001               	movlw	1
  4695     01D8  07A0               	addwf	i1sprintf@f,f
  4696     01D9  30FF               	movlw	-1
  4697     01DA  0720               	addwf	i1sprintf@f,w
  4698     01DB  0084               	movwf	4
  4699     01DC  120A  118A  23A7  120A  118A  	fcall	stringdir
  4700     01E1  00AC               	movwf	i1sprintf@c
  4701     01E2  082C               	movf	i1sprintf@c,w
  4702     01E3  1D03               	btfss	3,2
  4703     01E4  29E6               	goto	u155_21
  4704     01E5  29E7               	goto	u155_20
  4705     01E6                     u155_21:
  4706     01E6  2918               	goto	i1l1957
  4707     01E7                     u155_20:
  4708     01E7                     i1l2009:
  4709                           
  4710                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4711     01E7  082B               	movf	i1sprintf@sp,w
  4712     01E8  0084               	movwf	4
  4713     01E9  1383               	bcf	3,7	;select IRP bank0
  4714     01EA  0180               	clrf	0
  4715     01EB                     i1l411:
  4716     01EB  0008               	return
  4717     01EC                     __end_ofi1_sprintf:
  4718                           
  4719                           	psect	text24
  4720     072C                     __ptext24:	
  4721 ;; *************** function i1___lwmod *****************
  4722 ;; Defined at:
  4723 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;  divisor         2    8[COMMON] unsigned int 
  4726 ;;  dividend        2   10[COMMON] unsigned int 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  counter         1   13[COMMON] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  2    8[COMMON] unsigned int 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4738 ;;      Params:         4       0       0       0       0
  4739 ;;      Locals:         1       0       0       0       0
  4740 ;;      Temps:          1       0       0       0       0
  4741 ;;      Totals:         6       0       0       0       0
  4742 ;;Total ram usage:        6 bytes
  4743 ;; Hardware stack levels used: 1
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		i1_sprintf
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751     072C                     i1___lwmod:	
  4752                           ;psect for function i1___lwmod
  4753                           
  4754     072C                     i1l1765:	
  4755                           ;incstack = 0
  4756                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  4757                           
  4758     072C  0878               	movf	i1___lwmod@divisor,w
  4759     072D  0479               	iorwf	i1___lwmod@divisor+1,w
  4760     072E  1903               	btfsc	3,2
  4761     072F  2F31               	goto	u127_21
  4762     0730  2F32               	goto	u127_20
  4763     0731                     u127_21:
  4764     0731  2F61               	goto	i1l1783
  4765     0732                     u127_20:
  4766     0732                     i1l1767:
  4767     0732  01FD               	clrf	i1___lwmod@counter
  4768     0733  0AFD               	incf	i1___lwmod@counter,f
  4769     0734  2F40               	goto	i1l1773
  4770     0735                     i1l1769:
  4771     0735  3001               	movlw	1
  4772     0736                     u128_25:
  4773     0736  1003               	clrc
  4774     0737  0DF8               	rlf	i1___lwmod@divisor,f
  4775     0738  0DF9               	rlf	i1___lwmod@divisor+1,f
  4776     0739  3EFF               	addlw	-1
  4777     073A  1D03               	skipz
  4778     073B  2F36               	goto	u128_25
  4779     073C                     i1l1771:
  4780     073C  3001               	movlw	1
  4781     073D  00FC               	movwf	??i1___lwmod
  4782     073E  087C               	movf	??i1___lwmod,w
  4783     073F  07FD               	addwf	i1___lwmod@counter,f
  4784     0740                     i1l1773:
  4785     0740  1FF9               	btfss	i1___lwmod@divisor+1,7
  4786     0741  2F43               	goto	u129_21
  4787     0742  2F44               	goto	u129_20
  4788     0743                     u129_21:
  4789     0743  2F35               	goto	i1l1769
  4790     0744                     u129_20:
  4791     0744                     i1l1775:
  4792     0744  0879               	movf	i1___lwmod@divisor+1,w
  4793     0745  027B               	subwf	i1___lwmod@dividend+1,w
  4794     0746  1D03               	skipz
  4795     0747  2F4A               	goto	u130_25
  4796     0748  0878               	movf	i1___lwmod@divisor,w
  4797     0749  027A               	subwf	i1___lwmod@dividend,w
  4798     074A                     u130_25:
  4799     074A  1C03               	skipc
  4800     074B  2F4D               	goto	u130_21
  4801     074C  2F4E               	goto	u130_20
  4802     074D                     u130_21:
  4803     074D  2F54               	goto	i1l1779
  4804     074E                     u130_20:
  4805     074E                     i1l1777:
  4806     074E  0878               	movf	i1___lwmod@divisor,w
  4807     074F  02FA               	subwf	i1___lwmod@dividend,f
  4808     0750  0879               	movf	i1___lwmod@divisor+1,w
  4809     0751  1C03               	skipc
  4810     0752  03FB               	decf	i1___lwmod@dividend+1,f
  4811     0753  02FB               	subwf	i1___lwmod@dividend+1,f
  4812     0754                     i1l1779:
  4813     0754  3001               	movlw	1
  4814     0755                     u131_25:
  4815     0755  1003               	clrc
  4816     0756  0CF9               	rrf	i1___lwmod@divisor+1,f
  4817     0757  0CF8               	rrf	i1___lwmod@divisor,f
  4818     0758  3EFF               	addlw	-1
  4819     0759  1D03               	skipz
  4820     075A  2F55               	goto	u131_25
  4821     075B                     i1l1781:
  4822     075B  3001               	movlw	1
  4823     075C  02FD               	subwf	i1___lwmod@counter,f
  4824     075D  1D03               	btfss	3,2
  4825     075E  2F60               	goto	u132_21
  4826     075F  2F61               	goto	u132_20
  4827     0760                     u132_21:
  4828     0760  2F44               	goto	i1l1775
  4829     0761                     u132_20:
  4830     0761                     i1l1783:
  4831     0761  087B               	movf	i1___lwmod@dividend+1,w
  4832     0762  00F9               	movwf	?i1___lwmod+1
  4833     0763  087A               	movf	i1___lwmod@dividend,w
  4834     0764  00F8               	movwf	?i1___lwmod
  4835     0765                     i1l697:
  4836     0765  0008               	return
  4837     0766                     __end_ofi1___lwmod:
  4838                           
  4839                           	psect	text25
  4840     0569                     __ptext25:	
  4841 ;; *************** function i1___lwdiv *****************
  4842 ;; Defined at:
  4843 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  divisor         2    0[COMMON] unsigned int 
  4846 ;;  dividend        2    2[COMMON] unsigned int 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  quotient        2    5[COMMON] unsigned int 
  4849 ;;  counter         1    7[COMMON] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  2    0[COMMON] unsigned int 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4859 ;;      Params:         4       0       0       0       0
  4860 ;;      Locals:         3       0       0       0       0
  4861 ;;      Temps:          1       0       0       0       0
  4862 ;;      Totals:         8       0       0       0       0
  4863 ;;Total ram usage:        8 bytes
  4864 ;; Hardware stack levels used: 1
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		i1_sprintf
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872     0569                     i1___lwdiv:	
  4873                           ;psect for function i1___lwdiv
  4874                           
  4875     0569                     i1l1739:	
  4876                           ;incstack = 0
  4877                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  4878                           
  4879     0569  01F5               	clrf	i1___lwdiv@quotient
  4880     056A  01F6               	clrf	i1___lwdiv@quotient+1
  4881     056B                     i1l1741:
  4882     056B  0870               	movf	i1___lwdiv@divisor,w
  4883     056C  0471               	iorwf	i1___lwdiv@divisor+1,w
  4884     056D  1903               	btfsc	3,2
  4885     056E  2D70               	goto	u120_21
  4886     056F  2D71               	goto	u120_20
  4887     0570                     u120_21:
  4888     0570  2DA8               	goto	i1l1761
  4889     0571                     u120_20:
  4890     0571                     i1l1743:
  4891     0571  01F7               	clrf	i1___lwdiv@counter
  4892     0572  0AF7               	incf	i1___lwdiv@counter,f
  4893     0573  2D7F               	goto	i1l1749
  4894     0574                     i1l1745:
  4895     0574  3001               	movlw	1
  4896     0575                     u121_25:
  4897     0575  1003               	clrc
  4898     0576  0DF0               	rlf	i1___lwdiv@divisor,f
  4899     0577  0DF1               	rlf	i1___lwdiv@divisor+1,f
  4900     0578  3EFF               	addlw	-1
  4901     0579  1D03               	skipz
  4902     057A  2D75               	goto	u121_25
  4903     057B                     i1l1747:
  4904     057B  3001               	movlw	1
  4905     057C  00F4               	movwf	??i1___lwdiv
  4906     057D  0874               	movf	??i1___lwdiv,w
  4907     057E  07F7               	addwf	i1___lwdiv@counter,f
  4908     057F                     i1l1749:
  4909     057F  1FF1               	btfss	i1___lwdiv@divisor+1,7
  4910     0580  2D82               	goto	u122_21
  4911     0581  2D83               	goto	u122_20
  4912     0582                     u122_21:
  4913     0582  2D74               	goto	i1l1745
  4914     0583                     u122_20:
  4915     0583                     i1l1751:
  4916     0583  3001               	movlw	1
  4917     0584                     u123_25:
  4918     0584  1003               	clrc
  4919     0585  0DF5               	rlf	i1___lwdiv@quotient,f
  4920     0586  0DF6               	rlf	i1___lwdiv@quotient+1,f
  4921     0587  3EFF               	addlw	-1
  4922     0588  1D03               	skipz
  4923     0589  2D84               	goto	u123_25
  4924     058A  0871               	movf	i1___lwdiv@divisor+1,w
  4925     058B  0273               	subwf	i1___lwdiv@dividend+1,w
  4926     058C  1D03               	skipz
  4927     058D  2D90               	goto	u124_25
  4928     058E  0870               	movf	i1___lwdiv@divisor,w
  4929     058F  0272               	subwf	i1___lwdiv@dividend,w
  4930     0590                     u124_25:
  4931     0590  1C03               	skipc
  4932     0591  2D93               	goto	u124_21
  4933     0592  2D94               	goto	u124_20
  4934     0593                     u124_21:
  4935     0593  2D9B               	goto	i1l1757
  4936     0594                     u124_20:
  4937     0594                     i1l1753:
  4938     0594  0870               	movf	i1___lwdiv@divisor,w
  4939     0595  02F2               	subwf	i1___lwdiv@dividend,f
  4940     0596  0871               	movf	i1___lwdiv@divisor+1,w
  4941     0597  1C03               	skipc
  4942     0598  03F3               	decf	i1___lwdiv@dividend+1,f
  4943     0599  02F3               	subwf	i1___lwdiv@dividend+1,f
  4944     059A                     i1l1755:
  4945     059A  1475               	bsf	i1___lwdiv@quotient,0
  4946     059B                     i1l1757:
  4947     059B  3001               	movlw	1
  4948     059C                     u125_25:
  4949     059C  1003               	clrc
  4950     059D  0CF1               	rrf	i1___lwdiv@divisor+1,f
  4951     059E  0CF0               	rrf	i1___lwdiv@divisor,f
  4952     059F  3EFF               	addlw	-1
  4953     05A0  1D03               	skipz
  4954     05A1  2D9C               	goto	u125_25
  4955     05A2                     i1l1759:
  4956     05A2  3001               	movlw	1
  4957     05A3  02F7               	subwf	i1___lwdiv@counter,f
  4958     05A4  1D03               	btfss	3,2
  4959     05A5  2DA7               	goto	u126_21
  4960     05A6  2DA8               	goto	u126_20
  4961     05A7                     u126_21:
  4962     05A7  2D83               	goto	i1l1751
  4963     05A8                     u126_20:
  4964     05A8                     i1l1761:
  4965     05A8  0876               	movf	i1___lwdiv@quotient+1,w
  4966     05A9  00F1               	movwf	?i1___lwdiv+1
  4967     05AA  0875               	movf	i1___lwdiv@quotient,w
  4968     05AB  00F0               	movwf	?i1___lwdiv
  4969     05AC                     i1l687:
  4970     05AC  0008               	return
  4971     05AD                     __end_ofi1___lwdiv:
  4972     007E                     btemp	set	126	;btemp
  4973     007E                     wtemp0	set	126
  4974                           
  4975                           	psect	idloc
  4976                           
  4977                           ;Config register IDLOC0 @ 0x2000
  4978                           ;	unspecified, using default values
  4979     2000                     	org	8192
  4980     2000  3FFF               	dw	16383
  4981                           
  4982                           ;Config register IDLOC1 @ 0x2001
  4983                           ;	unspecified, using default values
  4984     2001                     	org	8193
  4985     2001  3FFF               	dw	16383
  4986                           
  4987                           ;Config register IDLOC2 @ 0x2002
  4988                           ;	unspecified, using default values
  4989     2002                     	org	8194
  4990     2002  3FFF               	dw	16383
  4991                           
  4992                           ;Config register IDLOC3 @ 0x2003
  4993                           ;	unspecified, using default values
  4994     2003                     	org	8195
  4995     2003  3FFF               	dw	16383
  4996                           
  4997                           	psect	config
  4998                           
  4999                           ;Config register CONFIG1 @ 0x2007
  5000                           ;	Oscillator Selection bits
  5001                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  5002                           ;	Watchdog Timer Enable bit
  5003                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  5004                           ;	Power-up Timer Enable bit
  5005                           ;	PWRTE = OFF, PWRT disabled
  5006                           ;	RE3/MCLR pin function select bit
  5007                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  5008                           ;	Code Protection bit
  5009                           ;	CP = OFF, Program memory code protection is disabled
  5010                           ;	Data Code Protection bit
  5011                           ;	CPD = OFF, Data memory code protection is disabled
  5012                           ;	Brown Out Reset Selection bits
  5013                           ;	BOREN = OFF, BOR disabled
  5014                           ;	Internal External Switchover bit
  5015                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  5016                           ;	Fail-Safe Clock Monitor Enabled bit
  5017                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  5018                           ;	Low Voltage Programming Enable bit
  5019                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  5020                           ;	In-Circuit Debugger Mode bit
  5021                           ;	DEBUG = 0x1, unprogramme  5022     2007                     	org	8199
  5023     2007  20D4               	dw	8404
  5024                           
  5025                           ;Config register CONFIG2 @ 0x2008
  5026                           ;	Brown-out Reset Selection bit
  5027                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  5028                           ;	Flash Program Memory Self Write Enable bits
  5029                           ;	WRT = OFF, Write protection off
  5030     2008                     	org	8200
  5031     2008  3FFF               	dw	16383

Data Sizes:
    Strings     68
    Constant    10
    Data        66
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      57
    BANK1            80     45      49
    BANK3            96      0      66
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_6(CODE[4]), STR_5(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> UART_read_char@CONT(BANK0[15]), CVPOT(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    UART_write_char@txt	PTR unsigned char  size(2) Largest target is 66
		 -> STR_2(CODE[23]), menu(BANK3[66]), CVPOT(BANK0[15]), STR_1(CODE[31]), 

    Lcd_Write_String8@a	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), STR_4(CODE[5]), STR_3(CODE[5]), CVPOT(BANK0[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UART_read_char
    _UART_read_char->i1_sprintf

Critical Paths under _main in BANK1

    _main->_POT
    _setup->_adc_init
    _POT->_map
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _map->___aldiv
    ___aldiv->___lmul
    _Lcd_Write_String8->_Lcd_Write_Char8
    _Lcd_Write_Char8->_Lcd_Port8
    _Lcd_Set_Cursor8->_Lcd_Cmd8
    _Lcd_Init8->_Lcd_Cmd8
    _Lcd_Clear8->_Lcd_Cmd8
    _Lcd_Cmd8->_Lcd_Port8

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    5357
                                             42 BANK1      3     3      0
                         _Lcd_Clear8
                          _Lcd_Init8
                    _Lcd_Set_Cursor8
                  _Lcd_Write_String8
                                _POT
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     580
                     _UART_RX_config
                     _UART_TX_config
                           _adc_init
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             3     1      2     152
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (2) _UART_TX_config                                       2     0      2     214
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _UART_RX_config                                       2     0      2     214
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _POT                                                  2     2      0    3388
                                             40 BANK1      2     2      0
                                _map
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1746
                                             14 BANK1     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     412
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (2) _map                                                 12     2     10    1642
                                             28 BANK1     12     2     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     316
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     625
                                             13 BANK1     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String8                                    4     2      2     620
                                              4 BANK1      4     2      2
                    _Lcd_Write_Char8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char8                                      4     4      0     130
                                              1 BANK1      3     3      0
                          _Lcd_Port8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor8                                      5     4      1     614
                                              4 BANK1      3     2      1
                           _Lcd_Cmd8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init8                                            2     2      0      93
                                              4 BANK1      2     2      0
                           _Lcd_Cmd8
                          _Lcd_Port8
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear8                                           0     0      0      62
                           _Lcd_Cmd8
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd8                                             3     3      0      62
                                              1 BANK1      3     3      0
                          _Lcd_Port8
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port8                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  6     6      0    1579
                                             31 BANK0      6     6      0
                     _UART_read_char
                    _UART_write_char
                           _adc_read
 ---------------------------------------------------------------------------------
 (5) _adc_read                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (6) _UART_write_char                                      7     5      2     546
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (5) _UART_read_char                                      18    18      0    1033
                                             13 BANK0     18    18      0
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (6) i1_sprintf                                           21    18      3     928
                                              0 BANK0     13    10      3
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (7) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear8
     _Lcd_Cmd8
       _Lcd_Port8
   _Lcd_Init8
     _Lcd_Cmd8
     _Lcd_Port8
   _Lcd_Set_Cursor8
     _Lcd_Cmd8
   _Lcd_Write_String8
     _Lcd_Write_Char8
       _Lcd_Port8
   _POT
     _map
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _setup
     _UART_RX_config
     _UART_TX_config
     _adc_init

 _isr (ROOT)
   _UART_read_char
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)
   _UART_write_char
   _adc_read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      42       9       68.8%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2D      31       7       61.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     25      39       5       71.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BA      12        0.0%
ABS                  0      0      BA       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Jul 28 12:02:35 2023

                        pc 0002                         l31 0496                         l17 06EF  
                       fsr 0004           ?_Lcd_Write_Char8 0070                        l211 0F82  
                      l220 044A                        l205 0F6B                        l223 0FB3  
                      l208 0FD3                        l217 07F7                        l411 0111  
                      l229 07D5         Lcd_Write_String8@a 00A4                        l193 06B0  
                      l273 0568                        l267 0568                        l283 0670  
                      l196 079D                        l429 04DE                        l277 0670  
                      l480 0200         Lcd_Write_String8@i 00A6                        l490 0288  
                      l687 0524                        l697 072B                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047                        _POT 0671                        _map 044B  
                      _isr 031F                        fsr0 0004                        indf 0000  
                     ?_POT 0070                       l2301 0270                       l2303 0275  
                     l2311 04E3                       l2305 0280                       l2321 04FB  
                     l2313 04E9                       l2401 004D                       l2323 050C  
                     l2315 04EC                       l2331 0520                       l2411 007E  
                     l2403 006A                       l2253 0F67                       l2261 04BC  
                     l2325 0512                       l2317 04F3                       l2309 04DF  
                     l2341 0702                       l2413 0083                       l2405 0072  
                     l2511 0FD0                       l2503 0FB7                       l2271 01EF  
                     l2263 04C5                       l2255 0497                       l2327 0513  
                     l2319 04F7                       l2351 0721                       l2343 0706  
                     l2335 06F0                       l2431 00BA                       l2423 00A1  
                     l2407 0076                       l2505 0FBA                       l2521 0FA9  
                     l2513 0F99                       l2601 07C1                       l2281 021B  
                     l2273 01F3                       l2265 04D6                       l2257 04A1  
                     l2329 051A                       l2345 070A                       l2337 06F8  
                     l2353 0727                       l2433 00BD                       l2425 00AB  
                     l2409 007A                       l2441 00FD                       l2361 06D2  
                     l2507 0FC2                       l2523 0FB0                       l2515 0F9B  
                     l2291 0240                       l2283 0223                       l2275 0204  
                     l2259 04A5                       l2347 0714                       l2339 06FB  
                     l2435 00EB                       l2427 00B1                       l2419 0085  
                     l2443 010D                       l2451 0525                       l2371 06E6  
                     l2363 06D6                       l2531 0786                       l2611 029D  
                     l2603 0289                       l2509 0FC5                       l2517 0F9E  
                     l2293 0252                       l2285 0226                       l2277 020F  
                     l2269 01EC                       l2349 071A                       l2437 00F0  
                     l2429 00B6                       l2701 005F                       l2461 0530  
                     l2453 0528                       l2373 06E7                       l2365 06D9  
                     l2357 06B1                       l2541 0791                       l2533 0789  
                     l2525 0766                       l2621 02D1                       l2613 02A7  
                     l2605 028E                       l2519 0FA6                       l2295 0260  
                     l2287 0233                       l2279 0213                       l2383 044B  
                     l2439 00F4                       l2391 003C                       l2471 054D  
                     l2463 0533                       l2455 052B                       l2375 06E8  
                     l2367 06E0                       l2359 06C0                       l2551 0798  
                     l2543 0792                       l2535 078A                       l2527 0770  
                     l2631 0306                       l2623 02DC                       l2615 02B2  
                     l2607 0293                       l2561 040B                       l2297 0261  
                     l2289 0237                       l2385 0492                       l2393 0042  
                     l2473 0550                       l2465 0536                       l2457 052E  
                     l2377 06EB                       l2369 06E3                       l2553 0799  
                     l2545 0795                       l2537 078E                       l2529 077B  
                     l2633 0309                       l2625 02E6                       l2617 02BC  
                     l2609 0298                       l2563 041B                       l2299 026A  
                     l2395 0047                       l2571 0674                       l2475 0559  
                     l2467 0541                       l2459 052F                       l2491 0655  
                     l2483 0631                       l2379 06EC                       l2547 0796  
                     l2539 0790                       l2635 030D                       l2627 02F6  
                     l2619 02C7                       l2565 0421                       l2557 03FB  
                     l2397 004C                       l2389 0039                       l2573 067F  
                     l2477 055C                       l2469 0544                       l2493 0658  
                     l2485 063E                       l2549 0797                       l2629 02FC  
                     l2567 0F76                       l2559 0401                       l2591 07EE  
                     l2583 07D9                       l2575 0682                       l2479 0565  
                     l2495 0661                       l2487 0649                       l2593 07F1  
                     l2585 07DE                       l2577 06A1                       l2569 0671  
                     l2497 0664                       l2489 064C                       l2587 07E1  
                     l2595 079E                       l2579 06AD                       l2499 066D  
                     l2589 07E8                       l2597 07A3                       ?_map 00BC  
                     l2599 07B9                       ?_isr 0070                       _ADON 00F8  
                     STR_1 03B7                       STR_2 03D6                       STR_3 03ED  
                     STR_4 03F2                       STR_5 03F7                       STR_6 03F7  
                     _CREN 00C4                       u2000 06C0                       u2001 06BF  
                     u2010 0042                       u2011 0041                       u2020 007A  
                     u2100 0559                       _CONT 0049                       u2021 0079  
                     u2101 0558                       u2005 06BC                       u2030 00A0  
                     u2110 0565                       u2031 009F                       u2111 0564  
                     u2040 00AB                       u2120 0649                       u2200 030D  
                     u2041 00AA                       u2121 0648                       u2201 030C  
                     u2050 00B1                       u2130 0655                       u2051 00B0  
                     u2035 009C                       u2131 0654                       u2060 00FD  
                     u2140 0661                       u2061 00FC                       u2141 0660  
                     u2070 010D                       u2150 066D                       u2071 010C  
                     u2151 066C                       u2160 07DE                       u2080 0541  
                     u2161 07DD                       u2081 0540                       u2217 0302  
                     u2170 07EE                       u2090 054D                       u2171 07ED  
                     u2091 054C                       u2227 0315                       u2180 07D5  
                     u2181 07D4                       u2237 067A                       u2190 02FC  
                     u2247 0FAD                       u2191 02FB                       u1720 04A5  
                     u2257 0407                       u1721 04A4                       u1810 0237  
                     u2267 0417                       u1811 0236                       u1731 04AE  
                     u1732 04B5                       u2277 0427                       u1805 0228  
                     u1733 04BC                       u1830 0252                       u1910 050C  
                     u2287 0FCB                       u1831 0251                       u1911 050B  
                     u1760 04D6                       u1825 0239                       u1761 04D5  
                     u1745 04BE                       u1905 04FC                       u1850 0270  
                     u1770 01F3                       u1930 0520                       u1851 026F  
                     u1835 024E                       u1771 01F2                       u1755 04C6  
                     u1931 051F                       u1915 0508                       u1860 0275  
                     u1780 0204                       u1940 06F8                       u1861 0274  
                     u1845 0262                       u1781 0203                       u1925 0514  
                     u1941 06F7                       u1790 0223                       u1870 04E9  
                     u1791 0222                       u1871 04E8                       u1960 070A  
                     u1961 0709                       u1890 04FB                       u1970 0714  
                     u1891 04FA                       u1971 0713                       u1955 06FC  
                     i1l20 0F75                       u1885 04ED                       u1990 0727  
                     u1991 0726                       u1975 0710                       u1985 071B  
                     _SPEN 00C7                       _TXIF 0064                       _main 0289  
                     _menu 0190                       btemp 007E                       start 0012  
         UART_write_char@i 0075                 _Lcd_Clear8 0F76                      ??_POT 00C8  
                    ??_map 00C6                      ??_isr 003F            __end_of___aldiv 0289  
                    ?_main 0070                      _BRG16 0C3B            __end_of___lwdiv 0525  
                    i1l301 0FFF                      _CVPOT 004A                      i1l411 01EB  
                    i1l180 0392                      i1l167 037E            __end_of___lwmod 072C  
                    i1l292 0630                      i1l295 0FD4                      i1l288 05F2  
                    i1l687 05AC                      i1l697 0765                      _RCREG 001A  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _PORTE 0009  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TXREG 0019          _Lcd_Write_String8 079E  
      ___lmul@multiplicand 00A4         i1___lwmod@dividend 007A         ?_Lcd_Write_String8 00A4  
          __end_of_dpowers 03B7                      _setup 0766                      map@vo 00C6  
                    pclath 000A        ??_Lcd_Write_String8 00A6                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0112           __end_of_Lcd_Cmd8 0FD4  
          __initialization 0015               __end_of_main 031F         UART_read_char@CONT 002F  
               i1sprintf@c 002C                 i1sprintf@f 0020                     ??_main 00CA  
__end_of_Lcd_Write_String8 07D6                     _ADRESH 001E                     ?_setup 0070  
                   _ANSELH 0189           __end_of_adc_init 06F0           __end_of_adc_read 0F76  
                   i1l2001 01C5                     i1l2003 01CA                     i1l2005 01CE  
                   i1l2021 05EF                     i1l2007 01D7                     i1l2031 0FDA  
                   i1l2023 05F6                     i1l2009 01E7                     i1l2041 0FEF  
                   i1l2033 0FDC                     i1l2025 060E                     i1l2017 0F6C  
                   i1l2043 0FFE                     i1l2035 0FE2                     i1l2027 0614  
                   i1l2131 0347                     i1l2037 0FE7                     i1l2029 0FD4  
                   i1l2133 034F                     i1l2125 031F                     i1l2039 0FED  
                   i1l2135 0355                     i1l2143 0371                     i1l2127 0323  
                   u120_20 0571                     u120_21 0570                     i1l2145 0384  
                   i1l2137 035F                     i1l2129 032B                     i1l2147 038F  
                   i1l2139 0368                     u121_25 0575                     i1l1741 056B  
                   i1l1751 0583                     i1l1743 0571                     i1l2703 0376  
                   u122_20 0583                     u130_20 074E                     i1l1753 0594  
                   u122_21 0582                     i1l1745 0574                     i1l1761 05A8  
                   u130_21 074D                     i1l2705 013B                     i1l1755 059A  
                   i1l1747 057B                     i1l1739 0569                     i1l1771 073C  
                   i1l1757 059B                     i1l1749 057F                     i1l1781 075B  
                   u130_25 074A                     i1l1773 0740                     i1l1765 072C  
                   i1l1759 05A2                     i1l1775 0744                     i1l1767 0732  
                   i1l1783 0761                     i1l1777 074E                     i1l1769 0735  
                   i1l1961 0123                     i1l1779 0754                     i1l1971 014E  
                   i1l1963 0128                     i1l1955 0115                     u123_25 0584  
                   u131_25 0755                     i1l1973 0152                     i1l1957 0118  
                   i1l1991 0187                     i1l1975 0156                     i1l1967 0129  
                   i1l1959 011E                     u124_20 0594                     u132_20 0761  
                   u124_21 0593                     u132_21 0760                     i1l1993 018D  
                   i1l1985 0161                     i1l1977 015A                     i1l1969 0146  
                   i1l1995 0192                     i1l1979 015F                     u124_25 0590  
                   i1l1997 0196                     i1l1989 017D                     i1l1999 0199  
                   u125_25 059C                     u126_20 05A8                     u150_20 0156  
                   u126_21 05A7                     u150_21 0155                     u127_20 0732  
                   u151_20 017C                     u127_21 0731                     u151_21 017B  
                   u151_25 0178                     u152_20 0187                     u160_20 0FDA  
                   u152_21 0186                     u160_21 0FD9                     u128_25 0736  
                   u129_20 0744                     u153_20 018D                     u161_20 0FE2  
                   u129_21 0743                     u153_21 018C                     u161_21 0FE1  
                   u154_20 01D7                     u162_20 0FED                     u154_21 01D6  
                   u162_21 0FEC                     u155_20 01E7                     u155_21 01E6  
                   u156_20 05F6                     u156_21 05F5                     u149_20 011E  
                   u157_20 0600                     u149_21 011D                     u158_20 061E  
                   u166_20 0323                     u166_21 0322                     u159_20 0630  
                   u167_20 0355                     u159_21 062F                     u167_21 0354  
                   u168_20 0370                     u168_21 036F                     u169_20 0384  
                   u169_21 0383                     _SPBRGH 009A              i1sprintf@flag 0027  
            i1sprintf@prec 0028                     ___lmul 0497                  ??___aldiv 00B5  
              ?_Lcd_Clear8 0070                  ??___lwdiv 00A4                  ??___lwmod 00AC  
                   _opcion 0047                     _numero 00CF                     map@val 00BC  
         Lcd_Write_Char8@a 00A3           Lcd_Write_Char8@y 00A2          __end_ofi1___lwdiv 05AD  
        __end_ofi1___lwmod 0766            _UART_write_char 05EF                     saved_w 007E  
                ??_sprintf 00B1    __end_of__initialization 0032          __end_ofi1_sprintf 01EC  
        __end_of_Lcd_Init8 044B          __end_of_Lcd_Port8 0F6C             __pcstackCOMMON 0070  
             __pidataBANK3 05AD              __end_of_setup 079E         UART_write_char@txt 0070  
              i1sprintf@ap 0026                i1sprintf@sp 002B                  ?_Lcd_Cmd8 0070  
                  ??_setup 00A3                 __pbssBANK0 0045                 __pbssBANK1 00CD  
               __pmaintext 0289          ??_Lcd_Set_Cursor8 00A5                    ?___lmul 00A0  
               __pintentry 0004    __end_of_UART_write_char 0631             ___lmul@product 00A9  
                ?_adc_init 00A0                  ?_adc_read 0070                 ??_Lcd_Cmd8 00A1  
               __stringtab 039D             _UART_RX_config 0525             _UART_TX_config 0631  
                  ___aldiv 01EC                    ___lwdiv 04DF                    ___lwmod 06F0  
                _ANSELbits 0188                 ??_adc_init 00A2                 ??_adc_read 0072  
                  __ptext1 0766                    __ptext2 06B1                    __ptext3 0631  
                  __ptext4 0525                    __ptext5 0671                    __ptext6 0036  
                  __ptext7 06F0                    __ptext8 04DF                    __ptext9 044B  
                  _dpowers 03AD          i1___lwdiv@divisor 0070     UART_read_char@caracter 003E  
        i1___lwdiv@counter 0077           ___aldiv@dividend 00B1                    map@maxx 00C0  
                  map@maxy 00C4                    map@minx 00BE                    map@miny 00C2  
                  _sprintf 0036                    clrloop0 07F9                    _voltaje 00CD  
     end_of_initialization 0032     __end_of_UART_RX_config 0569     __end_of_UART_TX_config 0671  
                Lcd_Cmd8@a 00A3                  _RCSTAbits 0018           ___aldiv@quotient 00B8  
             ??_Lcd_Clear8 00A4           ?_UART_write_char 0070           Lcd_Set_Cursor8@a 00A5  
         Lcd_Set_Cursor8@b 00A4                  _PORTCbits 0007                  _PORTDbits 0008  
                i1___lwdiv 0569                  i1___lwmod 072C            ?_UART_RX_config 00A0  
       __end_of_Lcd_Clear8 0F83            ?_UART_TX_config 00A0          ??_Lcd_Write_Char8 00A1  
                _TXSTAbits 0098                  i1_sprintf 0112                  _Lcd_Init8 03FB  
   UART_RX_config@baudrate 00A0                  _Lcd_Port8 0F64             __end_of___lmul 04DF  
           _UART_read_char 0FD4          i1___lwmod@divisor 0078          i1___lwmod@counter 007D  
      start_initialization 0015                __end_of_POT 06B1                __end_of_map 0497  
              __end_of_isr 039D                 ?i1___lwdiv 0070                 ?i1___lwmod 0078  
          _Lcd_Set_Cursor8 07D6               i1sprintf@val 0029                 ?i1_sprintf 0020  
                 ??___lmul 00A8                 ?_Lcd_Init8 0070     __end_of_UART_read_char 1000  
               init_fetch0 0F83                 ?_Lcd_Port8 0070                __pdataBANK3 0190  
          adc_init@channel 00A0                  ___latbits 0002              __pcstackBANK0 0020  
            __pcstackBANK1 00A0                sprintf@flag 00B5                sprintf@prec 00B6  
         ___lwdiv@dividend 00A2                   ?___aldiv 00AD            ?_UART_read_char 0070  
                 ?___lwdiv 00A0                   ?___lwmod 00A8                  __pstrings 039D  
  __end_of_Lcd_Set_Cursor8 07F8           ___lwdiv@quotient 00A6                ??i1___lwdiv 0074  
              ??i1___lwmod 007C                   ?_sprintf 00AE            ___aldiv@divisor 00AD  
        interrupt_function 0004            ___aldiv@counter 00B6                  clear_ram0 07F8  
                 _PIE1bits 008C                   _PIR1bits 000C                ??i1_sprintf 0023  
              ??_Lcd_Init8 00A4                ??_Lcd_Port8 00A0                 _ADCON0bits 001F  
              __stringbase 03AC                 _ADCON1bits 009F           ??_UART_RX_config 00A2  
          _Lcd_Write_Char8 0F96                   _Lcd_Cmd8 0FB4           ??_UART_TX_config 00A2  
        ___lmul@multiplier 00A0         __end_of__stringtab 03AD                   _adc_init 06B1  
                 _adc_read 0F6C                 sprintf@val 00B7           ?_Lcd_Set_Cursor8 00A4  
          ___lwdiv@divisor 00A0            ___lwdiv@counter 00A5                   __ptext10 0497  
                 __ptext11 01EC                   __ptext20 0F6C                   __ptext12 079E  
                 __ptext21 05EF                   __ptext13 0F96                   __ptext22 0FD4  
                 __ptext14 07D6                   __ptext23 0112                   __ptext15 03FB  
                 __ptext24 072C                   __ptext16 0F76                   __ptext25 0569  
                 __ptext17 0FB4                   __ptext18 0F64                   __ptext19 031F  
                 _contador 0045         i1___lwdiv@dividend 0072     UART_TX_config@baudrate 00A0  
      Lcd_Set_Cursor8@temp 00A6    __end_of_Lcd_Write_Char8 0FB4         i1___lwdiv@quotient 0075  
               _INTCONbits 000B                   init_ram0 0F87                   intlevel1 0000  
                sprintf@ap 00B4                  sprintf@sp 00B9           ___lwmod@dividend 00AA  
         ??_UART_read_char 002D                  stringcode 03A7                 _OSCCONbits 008F  
               Lcd_Port8@a 00A0                   sprintf@c 00BA                   sprintf@f 00AE  
          ___lwmod@divisor 00A8            ___lwmod@counter 00AD                   stringdir 03A7  
                 stringtab 039D               ___aldiv@sign 00B7          ??_UART_write_char 0072  
